{"version":3,"sources":["./node_modules/@ngrx/entity/__ivy_ngcc__/fesm2015/entity.js","./src/app/market-place/components/market-place-home/market-place-home.component.html","./src/app/market-place/components/purchase-contract-detail/purchase-contract-detail.component.html","./src/app/market-place/components/purchase-contract-list/purchase-contract-list.component.html","./src/app/market-place/components/show-ipfs-image/show-ipfs-image.component.html","./src/app/market-place/containers/new-purchase-contract/new-purchase-contract.component.html","./src/app/market-place/containers/view-product-collection/view-product-collection.component.html","./src/app/market-place/components/index.ts","./src/app/market-place/components/market-place-home/market-place-home.component.ts","./src/app/market-place/components/product-detail-home/product-detail-home.component.ts","./src/app/market-place/components/purchase-contract-detail/purchase-contract-detail.component.ts","./src/app/market-place/components/purchase-contract-list/purchase-contract-list.component.ts","./src/app/market-place/components/show-ipfs-image/show-ipfs-image.component.css","./src/app/market-place/components/show-ipfs-image/show-ipfs-image.component.ts","./src/app/market-place/containers/index.ts","./src/app/market-place/containers/new-purchase-contract/new-purchase-contract.component.css","./src/app/market-place/containers/new-purchase-contract/new-purchase-contract.component.ts","./src/app/market-place/containers/view-product-collection/view-product-collection.component.ts","./src/app/market-place/containers/view-purchase-contract/view-purchase-contract.component.ts","./src/app/market-place/guards/index.ts","./src/app/market-place/guards/products-loaded.guard.ts","./src/app/market-place/market-place-anchor.module.ts","./src/app/market-place/market-place-routing.module.ts","./src/app/market-place/market-place.module.ts","./src/app/market-place/models/index.ts","./src/app/market-place/models/purchase-contract.model.ts","./src/app/market-place/services/flea-market-contract-service.ts","./src/app/market-place/services/purchase-contract-service.ts","./src/app/market-place/services/tokens/ethers-web3-token.ts","./src/app/market-place/services/tokens/flea-market-contract-token.ts","./src/app/market-place/store/actions/index.ts","./src/app/market-place/store/actions/ipfs-product-image.actions.ts","./src/app/market-place/store/actions/purchase-contract.actions.ts","./src/app/market-place/store/effects/ipfs-product-image.effects.ts","./src/app/market-place/store/effects/purchase-contract.effects.ts","./src/app/market-place/store/reducers/index.ts","./src/app/market-place/store/reducers/ipfs-product-image.reducer.ts","./src/app/market-place/store/reducers/purchase-contract.reducer.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAC6C;AACH;;AAE1C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,iDAAiD;AACjD;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,0BAA0B,kEAAc;AACxC,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,6BAA6B,EAAE;AAC/B,mBAAmB,EAAE;AACrB,4BAA4B,kEAAc;AAC1C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kEAAc;AACrC,4BAA4B,kEAAc;AAC1C,uBAAuB,kEAAc;AACrC,yBAAyB,kEAAc;AACvC;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,sCAAsC;AACtC;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mCAAmC;AACnC;AACA;AACA,iDAAiD,WAAW,uCAAuC;AACnG;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,QAAQ,+DAAS;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,+BAA+B;AAC/B;AACA,wBAAwB;AACxB,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,wCAAwC;AACxC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,mCAAmC;AAC9C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,wCAAwC;AACxC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA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","file":"market-place-market-place-module-es2015.js","sourcesContent":["/**\n * @license NgRx 9.2.1\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { createSelector } from '@ngrx/store';\nimport { isDevMode } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/entity_state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template V\n * @return {?}\n */\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {},\n    };\n}\n/**\n * @template V\n * @return {?}\n */\nfunction createInitialStateFactory() {\n    /**\n     * @param {?=} additionalState\n     * @return {?}\n     */\n    function getInitialState(additionalState = {}) {\n        return Object.assign(getInitialEntityState(), additionalState);\n    }\n    return { getInitialState };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/state_selectors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @return {?}\n */\nfunction createSelectorsFactory() {\n    /**\n     * @param {?=} selectState\n     * @return {?}\n     */\n    function getSelectors(selectState) {\n        /** @type {?} */\n        const selectIds = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.ids);\n        /** @type {?} */\n        const selectEntities = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.entities);\n        /** @type {?} */\n        const selectAll = createSelector(selectIds, selectEntities, (/**\n         * @param {?} ids\n         * @param {?} entities\n         * @return {?}\n         */\n        (ids, entities) => ids.map((/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => ((/** @type {?} */ (entities)))[id]))));\n        /** @type {?} */\n        const selectTotal = createSelector(selectIds, (/**\n         * @param {?} ids\n         * @return {?}\n         */\n        ids => ids.length));\n        if (!selectState) {\n            return {\n                selectIds,\n                selectEntities,\n                selectAll,\n                selectTotal,\n            };\n        }\n        return {\n            selectIds: createSelector(selectState, selectIds),\n            selectEntities: createSelector(selectState, selectEntities),\n            selectAll: createSelector(selectState, selectAll),\n            selectTotal: createSelector(selectState, selectTotal),\n        };\n    }\n    return { getSelectors };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst DidMutate = {\n    EntitiesOnly: 0,\n    Both: 1,\n    None: 2,\n};\nDidMutate[DidMutate.EntitiesOnly] = 'EntitiesOnly';\nDidMutate[DidMutate.Both] = 'Both';\nDidMutate[DidMutate.None] = 'None';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nfunction createStateOperator(mutator) {\n    return (/**\n     * @template S\n     * @param {?} arg\n     * @param {?} state\n     * @return {?}\n     */\n    function operation(arg, state) {\n        /** @type {?} */\n        const clonedEntityState = {\n            ids: [...state.ids],\n            entities: Object.assign({}, state.entities),\n        };\n        /** @type {?} */\n        const didMutate = mutator(arg, clonedEntityState);\n        if (didMutate === DidMutate.Both) {\n            return Object.assign({}, state, clonedEntityState);\n        }\n        if (didMutate === DidMutate.EntitiesOnly) {\n            return Object.assign(Object.assign({}, state), { entities: clonedEntityState.entities });\n        }\n        return state;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} entity\n * @param {?} selectId\n * @return {?}\n */\nfunction selectIdValue(entity, selectId) {\n    /** @type {?} */\n    const key = selectId(entity);\n    if (isDevMode() && key === undefined) {\n        console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n    }\n    return key;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/unsorted_state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nfunction createUnsortedStateAdapter(selectId) {\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        /** @type {?} */\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return DidMutate.None;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(entities, state) {\n        /** @type {?} */\n        let didMutate = false;\n        for (const entity of entities) {\n            didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function setAllMutably(entities, state) {\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(entities, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function setOneMutably(entity, state) {\n        /** @type {?} */\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            state.entities[key] = entity;\n            return DidMutate.EntitiesOnly;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    function removeOneMutably(key, state) {\n        return removeManyMutably([key], state);\n    }\n    /**\n     * @param {?} keysOrPredicate\n     * @param {?} state\n     * @return {?}\n     */\n    function removeManyMutably(keysOrPredicate, state) {\n        /** @type {?} */\n        const keys = keysOrPredicate instanceof Array\n            ? keysOrPredicate\n            : state.ids.filter((/**\n             * @param {?} key\n             * @return {?}\n             */\n            (key) => keysOrPredicate(state.entities[key])));\n        /** @type {?} */\n        const didMutate = keys\n            .filter((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => key in state.entities))\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => delete state.entities[key])).length > 0;\n        if (didMutate) {\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @return {?}\n             */\n            (id) => id in state.entities));\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    function removeAll(state) {\n        return Object.assign({}, state, {\n            ids: [],\n            entities: {},\n        });\n    }\n    /**\n     * @param {?} keys\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeNewKey(keys, update, state) {\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        /** @type {?} */\n        const hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const newKeys = {};\n        updates = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        update => update.id in state.entities));\n        /** @type {?} */\n        const didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            /** @type {?} */\n            const didMutateIds = updates.filter((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => takeNewKey(newKeys, update, state))).length > 0;\n            if (didMutateIds) {\n                state.ids = state.ids.map((/**\n                 * @param {?} id\n                 * @return {?}\n                 */\n                (id) => newKeys[id] || id));\n                return DidMutate.Both;\n            }\n            else {\n                return DidMutate.EntitiesOnly;\n            }\n        }\n        return DidMutate.None;\n    }\n    /**\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(map, state) {\n        /** @type {?} */\n        const changes = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = map(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        /** @type {?} */\n        const updates = changes.filter((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ id }) => id in state.entities));\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    return {\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        addAll: createStateOperator(setAllMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably),\n        map: createStateOperator(mapMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/sorted_state_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nfunction createSortedStateAdapter(selectId, sort) {\n    const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(selectId);\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        return addManyMutably([entity], state);\n    }\n    /**\n     * @param {?} newModels\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(newModels, state) {\n        /** @type {?} */\n        const models = newModels.filter((/**\n         * @param {?} model\n         * @return {?}\n         */\n        model => !(selectIdValue(model, selectId) in state.entities)));\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            merge(models, state);\n            return DidMutate.Both;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function setAllMutably(models, state) {\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(models, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function setOneMutably(entity, state) {\n        /** @type {?} */\n        const id = selectIdValue(entity, selectId);\n        if (id in state.entities) {\n            state.ids = state.ids.filter((/**\n             * @param {?} val\n             * @return {?}\n             */\n            (val) => val !== id));\n            merge([entity], state);\n            return DidMutate.Both;\n        }\n        else {\n            return addOneMutably(entity, state);\n        }\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} models\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeUpdatedModel(models, update, state) {\n        if (!(update.id in state.entities)) {\n            return false;\n        }\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        delete state.entities[update.id];\n        models.push(updated);\n        return newKey !== update.id;\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const models = [];\n        /** @type {?} */\n        const didMutateIds = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        update => takeUpdatedModel(models, update, state))).length >\n            0;\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            /** @type {?} */\n            const originalIds = state.ids;\n            /** @type {?} */\n            const updatedIndexes = [];\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @param {?} index\n             * @return {?}\n             */\n            (id, index) => {\n                if (id in state.entities) {\n                    return true;\n                }\n                else {\n                    updatedIndexes.push(index);\n                    return false;\n                }\n            }));\n            merge(models, state);\n            if (!didMutateIds &&\n                updatedIndexes.every((/**\n                 * @param {?} i\n                 * @return {?}\n                 */\n                (i) => state.ids[i] === originalIds[i]))) {\n                return DidMutate.EntitiesOnly;\n            }\n            else {\n                return DidMutate.Both;\n            }\n        }\n    }\n    /**\n     * @param {?} updatesOrMap\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(updatesOrMap, state) {\n        /** @type {?} */\n        const updates = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = updatesOrMap(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function merge(models, state) {\n        models.sort(sort);\n        /** @type {?} */\n        const ids = [];\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        let j = 0;\n        while (i < models.length && j < state.ids.length) {\n            /** @type {?} */\n            const model = models[i];\n            /** @type {?} */\n            const modelId = selectIdValue(model, selectId);\n            /** @type {?} */\n            const entityId = state.ids[j];\n            /** @type {?} */\n            const entity = state.entities[entityId];\n            if (sort(model, entity) <= 0) {\n                ids.push(modelId);\n                i++;\n            }\n            else {\n                ids.push(entityId);\n                j++;\n            }\n        }\n        if (i < models.length) {\n            state.ids = ids.concat(models.slice(i).map(selectId));\n        }\n        else {\n            state.ids = ids.concat(state.ids.slice(j));\n        }\n        models.forEach((/**\n         * @param {?} model\n         * @param {?} i\n         * @return {?}\n         */\n        (model, i) => {\n            state.entities[selectId(model)] = model;\n        }));\n    }\n    return {\n        removeOne,\n        removeMany,\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        addAll: createStateOperator(setAllMutably),\n        setAll: createStateOperator(setAllMutably),\n        setOne: createStateOperator(setOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        map: createStateOperator(mapMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/create_adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?=} options\n * @return {?}\n */\nfunction createEntityAdapter(options = {}) {\n    const { selectId, sortComparer } = Object.assign({ sortComparer: false, selectId: (/**\n         * @param {?} instance\n         * @return {?}\n         */\n        (instance) => instance.id) }, options);\n    /** @type {?} */\n    const stateFactory = createInitialStateFactory();\n    /** @type {?} */\n    const selectorsFactory = createSelectorsFactory();\n    /** @type {?} */\n    const stateAdapter = sortComparer\n        ? createSortedStateAdapter(selectId, sortComparer)\n        : createUnsortedStateAdapter(selectId);\n    return Object.assign(Object.assign(Object.assign({ selectId,\n        sortComparer }, stateFactory), selectorsFactory), stateAdapter);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/models.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template T\n */\nfunction DictionaryNum() { }\n/**\n * @abstract\n * @template T\n */\nclass Dictionary {\n}\n/**\n * @record\n * @template T\n */\nfunction UpdateStr() { }\nif (false) {\n    /** @type {?} */\n    UpdateStr.prototype.id;\n    /** @type {?} */\n    UpdateStr.prototype.changes;\n}\n/**\n * @record\n * @template T\n */\nfunction UpdateNum() { }\nif (false) {\n    /** @type {?} */\n    UpdateNum.prototype.id;\n    /** @type {?} */\n    UpdateNum.prototype.changes;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityState() { }\nif (false) {\n    /** @type {?} */\n    EntityState.prototype.ids;\n    /** @type {?} */\n    EntityState.prototype.entities;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityDefinition() { }\nif (false) {\n    /** @type {?} */\n    EntityDefinition.prototype.selectId;\n    /** @type {?} */\n    EntityDefinition.prototype.sortComparer;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityStateAdapter() { }\nif (false) {\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addMany = function (entities, state) { };\n    /**\n     * @deprecated addAll has been renamed. Use setAll instead.\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.addAll = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.setAll = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.setOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeOne = function (key, state) { };\n    /**\n     * @template S\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeOne = function (key, state) { };\n    /**\n     * @template S\n     * @param {?} keys\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (keys, state) { };\n    /**\n     * @template S\n     * @param {?} keys\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (keys, state) { };\n    /**\n     * @template S\n     * @param {?} predicate\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeMany = function (predicate, state) { };\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.removeAll = function (state) { };\n    /**\n     * @template S\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.updateOne = function (update, state) { };\n    /**\n     * @template S\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.updateMany = function (updates, state) { };\n    /**\n     * @template S\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.upsertOne = function (entity, state) { };\n    /**\n     * @template S\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.upsertMany = function (entities, state) { };\n    /**\n     * @template S\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    EntityStateAdapter.prototype.map = function (map, state) { };\n}\n/**\n * @record\n * @template T, V\n */\nfunction EntitySelectors() { }\nif (false) {\n    /** @type {?} */\n    EntitySelectors.prototype.selectIds;\n    /** @type {?} */\n    EntitySelectors.prototype.selectEntities;\n    /** @type {?} */\n    EntitySelectors.prototype.selectAll;\n    /** @type {?} */\n    EntitySelectors.prototype.selectTotal;\n}\n/**\n * @record\n * @template T\n */\nfunction EntityAdapter() { }\nif (false) {\n    /** @type {?} */\n    EntityAdapter.prototype.selectId;\n    /** @type {?} */\n    EntityAdapter.prototype.sortComparer;\n    /**\n     * @return {?}\n     */\n    EntityAdapter.prototype.getInitialState = function () { };\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    EntityAdapter.prototype.getInitialState = function (state) { };\n    /**\n     * @return {?}\n     */\n    EntityAdapter.prototype.getSelectors = function () { };\n    /**\n     * @template V\n     * @param {?} selectState\n     * @return {?}\n     */\n    EntityAdapter.prototype.getSelectors = function (selectState) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/src/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: modules/entity/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Dictionary, createEntityAdapter };\n\n//# sourceMappingURL=entity.js.map","export default \"<h1 class=\\\"mat-headline text-center\\\">Inventory Management System</h1>\\n\\n<router-outlet></router-outlet>\";","export default \"<ng-container *ngIf=\\\"contract; then selectedTmpl; else noSelectedTmpl\\\">\\n</ng-container>\\n\\n<ng-template #selectedTmpl>\\n\\n  <mat-card-content>\\n    <section fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n     \\n      <h3 class=\\\"mat-h3\\\" fxFlex=\\\"38\\\" fxFlexOffset=\\\"2\\\">Contract Status:</h3>\\n      <mat-chip fxFlex [selected]=\\\"true\\\" [color]=\\\"statusColors[contract.state].color\\\">{{\\n        enumToString(statusColors[contract.state].state)\\n                  }}</mat-chip>\\n\\n      <span fxFlex=\\\"20\\\" fxFlexOffset=\\\"23\\\">\\n        <button mat-icon-button color=\\\"warn\\\" matTooltip=\\\"Abort contract by seller\\\" matTooltipPosition=\\\"above\\\"\\n          (click)=\\\"abortMe.emit()\\\" [disabled]=\\\"!canAbort\\\">\\n          <mat-icon>flash_on</mat-icon>\\n        </button>\\n\\n        <button mat-icon-button color=\\\"warn\\\" matTooltip=\\\"Remove contract by owner\\\" matTooltipPosition=\\\"above\\\"\\n          (click)=\\\"remove.emit(contract.productKey)\\\" [disabled]=\\\"!removeFromListing\\\">\\n          <mat-icon>delete_forever</mat-icon>\\n        </button>\\n      </span>\\n\\n    </section>\\n\\n\\n    <section>\\n      <mat-list dense>\\n        <mat-list-item>\\n          <h3 class=\\\"mat-h3\\\">Product Key:</h3>\\n          <span>{{ contract.productKey }}</span>\\n        </mat-list-item>\\n\\n        <mat-list-item>\\n          <h3 class=\\\"mat-h3\\\">Product Description</h3>\\n          <span>{{ contract.description }}</span>\\n        </mat-list-item>\\n\\n        <!-- \\n        <mat-list-item>\\n          <h3 class=\\\"mat-h3\\\">Contract Address</h3>\\n          <span>{{ contract.contractAddress }}</span>\\n        </mat-list-item>\\n        -->\\n\\n        <mat-list-item>\\n          <h3 class=\\\"mat-h3\\\">Price</h3>\\n          <span>{{ contract.price }} ETH</span>\\n        </mat-list-item>\\n\\n        <mat-list-item>\\n          <h3 class=\\\"mat-h3\\\">Balance</h3>\\n          <span>{{ contract.balance }} ETH</span>\\n        </mat-list-item>\\n\\n        <mat-list-item>\\n          <h3 class=\\\"mat-h3\\\">Seller Address</h3>\\n          <span>{{ contract.sellerAddress }}</span>\\n        </mat-list-item>\\n\\n        <mat-list-item *ngIf=\\\"contract.buyerAddress\\\">\\n          <h3 class=\\\"mat-h3\\\">Buyer Address</h3>\\n          <span>{{ contract.buyerAddress }}</span>\\n        </mat-list-item>\\n\\n        <mat-list-item *ngIf=\\\"showCommission\\\">\\n          <h3 class=\\\"mat-h3\\\">Quantity</h3>\\n          <span>{{ contract.commission/100}}</span>\\n        </mat-list-item>\\n\\n\\n      </mat-list>\\n    </section>\\n\\n    <mat-divider></mat-divider>\\n\\n    <section fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" style=\\\"padding: 15px 0px\\\">\\n\\n      <h3 class=\\\"mat-h3\\\" fxFlex=\\\"36\\\" fxFlexOffset=\\\"2\\\">Product Image</h3>\\n      <img #ipfsImage height=\\\"120px\\\" width=\\\"120px\\\">\\n\\n    </section>\\n\\n    <mat-divider></mat-divider>\\n\\n    <section fxLayout=\\\"row wrap\\\" fxLayoutAlign=\\\"space-between center\\\" style=\\\"margin-top: 10px\\\">\\n\\n      <mat-form-field appearance=\\\"outline\\\" *ngIf=\\\"canBuy\\\">\\n        <mat-label>Value in ETH. (2X price)</mat-label>\\n        <input matInput [formControl]=\\\"buyerConfirmPrice\\\" required>\\n        <mat-error *ngIf=\\\"buyerConfirmPrice.invalid && buyerConfirmPrice.touched\\\">{{validatorError}}</mat-error>\\n        <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\\n        <mat-hint>Producer Confirm Purchase</mat-hint>\\n      </mat-form-field>\\n\\n      <button mat-raised-button color=\\\"warn\\\" *ngIf=\\\"canBuy\\\" [disabled]=\\\"!(buyerConfirmPrice.valid && buyerConfirmPrice.dirty)\\\" (click)=\\\"buy.emit(buyerConfirmPrice.value)\\\">\\n        Producer Execute Purchase</button>\\n      <button mat-raised-button color=\\\"accent\\\" *ngIf=\\\"canDelivery\\\" (click)=\\\"delivery.emit()\\\">\\n        Supplier Confirm Delivery</button> \\n      <button mat-raised-button color=\\\"primary\\\" matTooltip=\\\"Seller click to receive escrow\\\" matTooltipPosition=\\\"above\\\" *ngIf=\\\"canReleaseEscrow\\\" (click)=\\\"releaseEscrow.emit()\\\">\\n        Supplier Receive Escrow <mat-icon>local_bar</mat-icon>\\n      </button>\\n     \\n\\n    </section>\\n    <mat-card-footer>\\n\\n    </mat-card-footer>\\n\\n  </mat-card-content>\\n\\n\\n</ng-template>\\n\\n\\n\\n<ng-template #noSelectedTmpl>\\n  ...Please wait for the contract to load.\\n</ng-template>\\n\\n\\n\\n<!-- \\n  <p>Debug purchase contract details: {{ contract | json }}</p>\\n  <p>IPFS image: {{ image }}</p>\\n  -->\";","export default \"\\n\\n\\n<mat-list>\\n\\n    <mat-list-item *ngFor=\\\"let product of products\\\" (click)=\\\"selectMe.emit(product)\\\">\\n        <img matListAvatar src=\\\"../../../../assets/img/purchase-contract.png\\\">\\n        <h3 class=\\\"mat-h3\\\" mat-line>{{product.productKey}}</h3>\\n        <small class=\\\"mat-caption gray-color\\\" mat-line> {{product.contractAddress}} </small>\\n        <mat-divider></mat-divider>\\n    </mat-list-item>\\n\\n</mat-list>\\n   \\n\\n\\n   \\n\\n\\n\\n\";","export default \"\\n<h2 mat-dialog-title>IPFS Product Image</h2>\\n\\n<div *ngIf=\\\"(image$ | async) as image else loading\\\">\\n</div>\\n\\n <mat-dialog-content class=\\\"text-center\\\">\\n    \\n    <img #ipfsImage height=\\\"300px\\\" width=\\\"300px\\\">\\n    \\n    <ng-template #loading>\\n        <mat-progress-spinner \\n            color=\\\"warn\\\"\\n            mode=\\\"indeterminate\\\"\\n            value=\\\"50\\\"\\n            diameter=\\\"100\\\"\\n            strokeWidth=\\\"10\\\">\\n        </mat-progress-spinner>\\n    </ng-template>\\n    \\n </mat-dialog-content>\\n\\n <mat-dialog-actions>\\n    <button mat-stroked-button color=\\\"warn\\\" [mat-dialog-close]=\\\"true\\\"  cdkFocusInitial>OK</button>\\n </mat-dialog-actions>\\n\\n\\n\";","export default \"<mat-chip-list> </mat-chip-list>\\n<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center start\\\">\\n\\n  <mat-card fxFlex=\\\"60\\\">\\n    <mat-card-subtitle>\\n      New Inventory Contract\\n    </mat-card-subtitle>\\n\\n    <form [formGroup]=\\\"frmGroup\\\" novalidate>\\n\\n      <mat-card-content>\\n        <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"6px\\\">\\n          <span class=\\\"red-color\\\">*</span>\\n          <div class=\\\"mat-caption text-muted\\\">required fields</div>\\n        </div>\\n\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n          <mat-form-field [color]=\\\"'accent'\\\" fxFlex>\\n            <input matInput placeholder=\\\"Unique Product Key *\\\" formControlName=\\\"productKey\\\" />\\n            <mat-error *ngIf=\\\"required('productKey')\\\">Value is required</mat-error>\\n            <mat-error *ngIf=\\\"invalid32BytesKey('productKey')\\\">\\n              Invalid product key string. Must be less than 32 bytes</mat-error>\\n          </mat-form-field>\\n        </div>\\n\\n\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n          <mat-form-field [color]=\\\"'accent'\\\" fxFlex>\\n            <input matInput placeholder=\\\"Description *\\\" formControlName=\\\"description\\\" />\\n            <mat-error *ngIf=\\\"required('description')\\\">Value is required</mat-error>\\n          </mat-form-field>\\n        </div>\\n\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n          <mat-form-field [color]=\\\"'accent'\\\" fxFlex=\\\"45\\\">\\n            <input matInput placeholder=\\\"Value in ether. Has to include 2x price *\\\" formControlName=\\\"etherValue\\\" />\\n            <span matSuffix>$ETH</span>\\n            <mat-error *ngIf=\\\"required('etherValue')\\\">Value is required</mat-error>\\n            <mat-error *ngIf=\\\"invalidPattern('etherValue')\\\">Invalid ether value format. Has to be (#.###)</mat-error>\\n          </mat-form-field>\\n\\n\\n          <mat-form-field [color]=\\\"'accent'\\\" fxFlex=\\\"45\\\" fxFlexOffset=\\\"40px\\\">\\n            <mat-select placeholder=\\\"Quantity *\\\" formControlName=\\\"commission\\\">\\n              <mat-option *ngFor=\\\"let item of commissions\\\" [value]=\\\"item\\\">\\n                {{item}}\\n              </mat-option>\\n            </mat-select>\\n            <span matSuffix></span>\\n            <mat-error *ngIf=\\\"required('description')\\\">Value is required</mat-error>\\n          </mat-form-field>\\n\\n        </div>\\n\\n\\n      </mat-card-content>\\n\\n      <input type=\\\"file\\\" #file style=\\\"display: none\\\" (change)=\\\"onFileChange($event)\\\" />\\n\\n      <mat-card-actions>\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"selectFile()\\\">\\n           Product Image \\n          <mat-icon>category</mat-icon>\\n        </button>\\n\\n        <button mat-raised-button color=\\\"accent\\\" *ngIf=\\\"fileBlob\\\" (click)=\\\"uploadFile()\\\"\\n          [disabled]=\\\"formControl('fileArg').invalid\\\">\\n          Upload To IPFS\\n          <mat-icon>offline_bolt</mat-icon>\\n        </button>\\n\\n      </mat-card-actions>\\n\\n      <mat-card-content *ngIf=\\\"fileBlob\\\">\\n\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n          <div fxFlex=\\\"25\\\" class=\\\"text-center\\\">Image</div>\\n          <div fxFlex class=\\\"text-center\\\">IPFS Hash</div>\\n          <div fxFlex=\\\"15\\\" class=\\\"text-center\\\">Upload Status</div>\\n        </div>\\n        <p></p>\\n\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\">\\n\\n          <ng-container *ngIf=\\\"formControl('fileArg').invalid; then showError; else showImage\\\">\\n          </ng-container>\\n\\n          <ng-template #showError>\\n            <div fxFlex=\\\"25\\\" class=\\\"text-center\\\">\\n\\n              <mat-error mat-line *ngIf=\\\"requiredFile('fileArg')\\\">You must choose a file</mat-error>\\n              <mat-error mat-line *ngIf=\\\"invalidPatternFile('fileArg')\\\">Invalid file image extension</mat-error>\\n\\n            </div>\\n          </ng-template>\\n\\n          <ng-template #showImage>\\n            <div fxFlex=\\\"25\\\" class=\\\"text-center\\\">\\n              <img [src]=\\\"fileContent\\\" height=\\\"200\\\" width=\\\"200\\\" />\\n              <p> {{fileBlob.name }} </p>\\n            </div>\\n          </ng-template>\\n\\n\\n          <div fxFlex>\\n            <div *ngIf=\\\"(ipfsHash$ | async) as ipfsHash;\\\" class=\\\"text-center\\\">\\n\\n              <button mat-stroked-button color=\\\"warn\\\" matTooltip=\\\"Click to show image from IPFS\\\" (click)=\\\"loadImage()\\\">\\n                {{ipfsHash}}\\n                <mat-icon>visibility</mat-icon>\\n              </button>\\n            </div>\\n\\n          </div>\\n\\n          <div fxFlex=\\\"15\\\" class=\\\"text-center\\\">\\n\\n            <div *ngIf=\\\"(uploadStatus$ | async) as status;\\\">\\n\\n              <div *ngIf=\\\"inProgress(status); else idle\\\">\\n                <mat-progress-spinner color=\\\"warn\\\" mode=\\\"indeterminate\\\" value=\\\"50\\\" diameter=\\\"50\\\" strokeWidth=\\\"5\\\">\\n                </mat-progress-spinner>\\n              </div>\\n\\n              <ng-template #idle>\\n                <mat-chip *ngIf=\\\"isPending(status)\\\">{{ status }}</mat-chip>\\n                <mat-chip *ngIf=\\\"isSuccess(status)\\\" selected=\\\"true\\\" color=\\\"accent\\\">\\n                  {{ status }}\\n                </mat-chip>\\n                <mat-chip *ngIf=\\\"isError(status)\\\" selected=\\\"true\\\" color=\\\"warn\\\">\\n                  {{status}}\\n                </mat-chip>\\n              </ng-template>\\n\\n            </div>\\n\\n          </div>\\n\\n        </div>\\n\\n      </mat-card-content>\\n\\n      <mat-card-actions fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end center\\\">\\n        <button mat-flat-button color=\\\"warn\\\" [disabled]=\\\"frmGroup.pristine || frmGroup.invalid\\\" (click)=\\\"onCreate()\\\"\\n          class='margin-right--10'>Create Contract</button>\\n      </mat-card-actions>\\n\\n      <!--\\n\\n          <mat-card-content>\\n\\n              Control invalid: {{ formControl('fileArg').invalid | json}}\\n              <br>\\n              Control pristine: {{ formControl('fileArg').pristine | json}}\\n\\n          </mat-card-content>\\n\\n            -->\\n\\n    </form>\\n  </mat-card>\\n</div>\";","export default \"<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center stretch\\\" fxLayoutGap=\\\"16px\\\">\\n\\n\\n    <mat-card fxFlex=\\\"50\\\">\\n\\n        <mat-card-subtitle>Inventory  List</mat-card-subtitle>\\n\\n        <mat-card-content fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\n            <mat-form-field color=\\\"accent\\\" fxFlex=\\\"40\\\">\\n                <input matInput placeholder=\\\"Search for contact by key\\\" #contractKey>\\n            </mat-form-field>\\n            <div>\\n                <a mat-mini-fab color=\\\"warn\\\" style=\\\"margin-right: 20px\\\"\\n                routerLink='./make/new'\\n                 matTooltip=\\\"create new contract\\\" matTooltipPosition=\\\"left\\\">\\n                    <mat-icon>Add</mat-icon>\\n                </a>\\n            </div>\\n        </mat-card-content>\\n\\n        <mat-card-content>\\n            <app-purchase-contract-list [products]=\\\"filteredProducts$ | async\\\"\\n                (selectMe)=\\\"selectPurchaseContract($event)\\\">\\n            </app-purchase-contract-list>\\n\\n            <p *ngIf=\\\"(filteredProducts$ | async)?.length === 0\\\">\\n                    No Products to Show \\n            </p>\\n        </mat-card-content>\\n    </mat-card>\\n\\n\\n    <mat-card fxFlex=\\\"50\\\">\\n        <mat-card-subtitle>Purchase Contract Details</mat-card-subtitle>\\n\\n        <router-outlet></router-outlet>\\n\\n    </mat-card>\\n\\n\\n\\n\\n\\n\\n\\n</div>\";","\nexport * from './market-place-home/market-place-home.component';\nexport * from './purchase-contract-list/purchase-contract-list.component';\nexport * from './show-ipfs-image/show-ipfs-image.component';\nexport * from './product-detail-home/product-detail-home.component';\nexport * from './purchase-contract-detail/purchase-contract-detail.component';\n","import { Component, OnInit } from '@angular/core';\nimport { FleaMarketContractService } from '../../services/flea-market-contract-service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-marketplace-home',\n  templateUrl: './market-place-home.component.html',\n})\nexport class MarketPlaceHomeComponent implements OnInit  {\n\n  name$: Observable<string>;\n\n  constructor(\n    private fleaSrv: FleaMarketContractService,\n\n  ) { }\n\n  ngOnInit() {\n\n    this.name$ = this.fleaSrv.getName();\n  }\n\n}\n","\nimport { Component, } from '@angular/core';\n\n@Component({\n    selector: 'app-product-detail-home',\n    template: `\n       <h3 class='mat-subheading-2'> To load a purchase contract details please select the corresponding item from the left panel</h3>\n    `,\n  })\n  export class ProductDetailHomeComponent {\n\n  }\n\n","\nimport { Component, EventEmitter, Input, Output, OnChanges, SimpleChanges, Inject, ViewChild, ElementRef } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { windowRefToken } from '../../../core/services/tokens';\nimport { PurchaseContractModel, ContractState } from '../../models';\nimport {ThemePalette} from '@angular/material/core';\n\n\ninterface StatusColor {\n  state: ContractState;\n  color: ThemePalette;\n}\n\n@Component({\n  selector: 'app-purchase-contract-detail',\n  templateUrl: './purchase-contract-detail.component.html',\n  styles: [\n    `\n    mat-list-item h3 {\n        width: 240px;\n      }\n\n    `\n  ]\n})\nexport class PurchaseContractDetailComponent implements OnChanges {\n\n  @ViewChild('ipfsImage') imageRef: ElementRef;\n  @Input() contract: PurchaseContractModel;\n  @Input() image: Blob;\n  @Input() account: string;\n  @Output() remove = new EventEmitter<string>();\n  @Output() abortMe = new EventEmitter();\n  @Output() buy = new EventEmitter<string>();\n  @Output() delivery = new EventEmitter();\n  @Output() releaseEscrow = new EventEmitter();\n  @Output() receiveCommission = new EventEmitter();\n\n  statusColors: StatusColor[] = [\n    {state: ContractState.Created, color: 'accent'},\n    {state: ContractState.Locked, color: 'primary'},\n    {state: ContractState.Canceled, color: undefined},\n    {state: ContractState.ItemReceived, color: 'accent'},\n    {state: ContractState.SellerPaid, color: 'primary'},\n    {state: ContractState.OwnerPaid, color: 'primary'},\n    {state: ContractState.Completed, color: 'warn'},\n  ];\n\n  buyerConfirmPrice = new FormControl('', [Validators.required, , Validators.pattern(/^\\d+(\\.\\d{1,4})?$/)]);\n\n  constructor(\n    @Inject(windowRefToken) private windowRef: Window\n  ) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    if (this.imageRef) {\n      this.imageRef.nativeElement.src = this.windowRef.window.URL.createObjectURL(this.image);\n    }\n\n    this.buyerConfirmPrice.reset();\n  }\n\n  // based on http://geekswithblogs.net/PhubarBaz/archive/2013/11/25/typescript-enums-to-string.aspx\n  enumToString = (state: ContractState): string => ContractState[state];\n\n  get validatorError() {\n    return this.buyerConfirmPrice.hasError('required') ? 'You must enter a value' :\n      this.buyerConfirmPrice.hasError('pattern') ? 'Not a valid format' :\n        '';\n  }\n\n\n  // only the deployer can remove contract and the state is Canceled\n  get removeFromListing() {\n    return (this.contract.state === ContractState.Canceled) &&\n    (this.contract.ownerAddress === this.account);\n  }\n\n\n  // only the seller can abort contract and the state is Created\n  get canAbort() {\n    return (this.contract.state === ContractState.Created) &&\n    (this.contract.sellerAddress === this.account);\n\n  }\n  /* criteria to buy action\n   - contract in state Created\n   - Buyer address is null\n   - And it is should be not the Seller\n\n  */\n  get canBuy() {\n    return (this.contract.state === ContractState.Created)\n    && (!this.contract.buyerAddress)\n    && (this.contract.sellerAddress !== this.account);\n\n  }\n  // only the buyer can perform this action and the state is Locked\n  get canDelivery() {\n    return (this.contract.state === ContractState.Locked) &&\n    (this.contract.buyerAddress === this.account);\n  }\n\n  // only the seller and the deployer can see commission field\n  get showCommission() {\n    return (this.contract.ownerAddress === this.account) ||\n    (this.contract.sellerAddress === this.account);\n  }\n\n  get canReleaseEscrow() {\n    return (this.contract.state === ContractState.ItemReceived || this.contract.state === ContractState.OwnerPaid ) &&\n    (this.contract.sellerAddress === this.account);\n  }\n\n  get canReceiveCommission() {\n    return (this.contract.state === ContractState.ItemReceived || this.contract.state === ContractState.SellerPaid ) &&\n    (this.contract.ownerAddress === this.account);\n  }\n\n}\n\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { PurchaseWidgetModel } from '../../models';\n\n\n@Component({\n  selector: 'app-purchase-contract-list',\n  templateUrl: './purchase-contract-list.component.html',\n  styles: [\n    `\n    mat-list {\n      position: relative;\n      max-height: 420px;\n      overflow: auto;\n      }\n\n    `,\n    `\n    mat-list-item {\n      cursor: pointer;\n      }\n\n    mat-list-item:hover {\n      box-shadow: 3px 3px 12px -2px rgba(0, 0, 0, 0.5);\n    }\n\n    `,\n  ],\n\n})\nexport class PurchaseContractListComponent {\n\n  @Input() products: PurchaseWidgetModel[];\n  @Output() selectMe = new EventEmitter<PurchaseWidgetModel>();\n}\n","export default \"\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21hcmtldC1wbGFjZS9jb21wb25lbnRzL3Nob3ctaXBmcy1pbWFnZS9zaG93LWlwZnMtaW1hZ2UuY29tcG9uZW50LmNzcyJ9 */\";","\nimport { ChangeDetectionStrategy, Component, Inject, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { windowRefToken } from '../../../core/services/tokens';\nimport { Observable } from 'rxjs';\nimport { withLatestFrom, map, tap, filter, take } from 'rxjs/operators';\n\nimport { Store, select } from '@ngrx/store';\nimport * as fromPurchaseContract from '../../store/reducers';\nimport * as IpfsActions from '../../store/actions/ipfs-product-image.actions';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'app-show-ipfs-image',\n  templateUrl: 'show-ipfs-image.component.html',\n  styleUrls: ['show-ipfs-image.component.css']\n})\nexport class ShowIpfsImageComponent implements OnInit {\n\n  @ViewChild('ipfsImage', { static: true }) imageRef: ElementRef;\n  image$: Observable<Blob>;\n\n  constructor(\n    private store$: Store<fromPurchaseContract.AppState>,\n    public dialogRef: MatDialogRef<ShowIpfsImageComponent>,\n    @Inject(windowRefToken) private windowRef: Window\n  ) { }\n\n\n  ngOnInit() {\n    this.image$ = this.checkStore().pipe(\n      tap((blob) =>\n        this.imageRef.nativeElement.src = this.windowRef.window.URL.createObjectURL(blob)\n      )\n    );\n  }\n\n  checkStore(): Observable<Blob> {\n    return this.store$.pipe(\n      select(fromPurchaseContract.getImageBlob),\n      withLatestFrom(this.store$.pipe(select(fromPurchaseContract.getIpfsHash))),\n\n      tap(([image, ipfsHash]) => {\n        if (!image) {\n          this.store$.dispatch(IpfsActions.downloadImage({ ipfsHash }));\n        }\n      }),\n      map(([image, ipfsHash]) => image),\n      // Notice that the filter() returns the observable sequence that contains elements\n      // from the input sequence that satisfy the condition.\n      // so in this case, if the image blob is null, the steam will not continue, but\n      // when the image blob is not empty, we grab this value.\n      // Which means we are waiting for the\n      // image blob value has become not null and then we continue the stream and take this one value .\n      // after that the whole stream will be completed.\n      filter(image => !!image),\n      take(1)\n    );\n  }\n\n\n\n}\n","\nexport * from './new-purchase-contract/new-purchase-contract.component';\nexport * from './view-product-collection/view-product-collection.component';\nexport * from './view-purchase-contract/view-purchase-contract.component';\n","export default \"\\n.spiner-section-200 {\\n    width: 200px;\\n}\\n\\n.margin-right--10 {\\n    margin-right: 10px !important\\n }\\n\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbWFya2V0LXBsYWNlL2NvbnRhaW5lcnMvbmV3LXB1cmNoYXNlLWNvbnRyYWN0L25ldy1wdXJjaGFzZS1jb250cmFjdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSTtDQUNIIiwiZmlsZSI6InNyYy9hcHAvbWFya2V0LXBsYWNlL2NvbnRhaW5lcnMvbmV3LXB1cmNoYXNlLWNvbnRyYWN0L25ldy1wdXJjaGFzZS1jb250cmFjdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4uc3BpbmVyLXNlY3Rpb24tMjAwIHtcbiAgICB3aWR0aDogMjAwcHg7XG59XG5cbi5tYXJnaW4tcmlnaHQtLTEwIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHggIWltcG9ydGFudFxuIH1cblxuIl19 */\";","import { Component, ViewChild, ElementRef, OnInit, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { utils } from 'ethers';\n\nimport { Store, select } from '@ngrx/store';\nimport * as fromPurchaseContract from '../../store/reducers';\nimport { IpfsImageActions, PurchaseContractActions } from '../../store/actions';\nimport { FileUploadStatus } from '../../store/reducers/ipfs-product-image.reducer';\n\nimport { ShowIpfsImageComponent } from '../../components/show-ipfs-image/show-ipfs-image.component';\n\n/* based on\n      https://docs.ethers.io/ethers.js/html/api-utils.html#bytes32-strings\n\n      check if string is less then 32 bytes. Needed to pass into the smart contract\n  */\nfunction bites32StringValidator(control: AbstractControl): { [key: string]: any } | null {\n\n  let pathTest = false;\n\n  try {\n    utils.formatBytes32String(control.value);\n    pathTest = true;\n\n  } catch (error) {\n    // console.log('bites32StringValidator', error)\n  }\n  /*\n  If our validation fails, we return an object with a key for the error name and a value of true.\n  Otherwise, if the validation passes, we simply return null.\n  */\n\n  return !pathTest ? {\n    forbiddenKey: {\n      value: control.value\n    }\n  } : null;\n}\n\n@Component({\n  selector: 'app-new-purchase-contract',\n  templateUrl: './new-purchase-contract.component.html',\n  styleUrls: ['./new-purchase-contract.component.css']\n})\nexport class NewPurchaseContractComponent implements OnInit, OnDestroy {\n\n  @ViewChild('file') fileControl: ElementRef;\n  fileBlob: File;\n  fileContent: ArrayBuffer;\n\n  ipfsHash$: Observable<string>;\n  uploadStatus$: Observable<FileUploadStatus>;\n  private readonly IMAGE_PATTERN: RegExp = /^.+\\.(png|jpg|jpeg|gif|png)$/;\n  commissions: string[] = ['2.0', '2.5', '3.0', '3.5', '4.0'];\n\n  constructor(\n    private store$: Store<fromPurchaseContract.AppState>,\n    private formBuilder: FormBuilder,\n    public dialog: MatDialog\n  ) { }\n\n  frmGroup: FormGroup = this.formBuilder.group({\n    productKey: ['', [Validators.required, bites32StringValidator]],\n    description: ['', Validators.required],\n    etherValue: ['', [Validators.required, Validators.pattern(/^\\d+(\\.\\d{1,3})?$/)]],\n    commission: ['', Validators.required],\n    fileArg: [\n      '', [Validators.required, Validators.pattern(this.IMAGE_PATTERN)]\n    ],\n    ipfsHash: ['', Validators.required] // to hold ipfsHash value\n  });\n\n\n  ngOnInit() {\n\n    this.uploadStatus$ = this.store$.pipe(select(fromPurchaseContract.getIpfsUploadStatus));\n    this.ipfsHash$ = this.store$.pipe(\n      select(fromPurchaseContract.getIpfsHash),\n      tap(value => this.frmGroup.get('ipfsHash').patchValue(value))\n    );\n  }\n\n  formControl = (name: string) => this.frmGroup.get(`${name}`);\n\n  /*\n     A controls is said to be touched if the the user focused on the control\n     and then focused on something else.\n     For example by clicking into the control and then pressing tab or clicking on another control in the form.\n\n      The difference between touched and dirty is that with touched the user doesn’t need to actually change\n      the value of the input control.\n    */\n  required = (name: string) =>\n    this.formControl(name).hasError('required') && this.formControl(name).touched\n\n  invalidPattern = (name: string) =>\n    // 'dirty' means that the user is actually interacted with the control\n    // making attempt of typing vs just focusing or blaring\n    this.formControl(name).hasError('pattern') && this.formControl(name).dirty\n\n  invalid32BytesKey = (name: string) =>\n    this.formControl(name).hasError('forbiddenKey') && this.formControl(name).dirty\n\n  requiredFile = (name: string) => this.formControl(name).hasError('required');\n  invalidPatternFile = (name: string) => this.formControl(name).hasError('pattern');\n\n\n  // here is the way to emulate the click on the file input control\n  selectFile() {\n    this.fileControl.nativeElement.click();\n  }\n\n  onFileChange(event) {\n    if (event.target.files && event.target.files.length) {\n      this.fileBlob = event.target.files[0];\n\n      this.frmGroup.get('fileArg').patchValue(this.fileBlob.name);\n\n      const reader = new FileReader();\n      reader.readAsDataURL(this.fileBlob);\n      reader.onload = _ => {\n        this.fileContent = reader.result as ArrayBuffer;\n        this.store$.dispatch(IpfsImageActions.reset());\n      };\n    }\n  }\n\n  uploadFile() {\n    this.store$.dispatch(IpfsImageActions.uploadImage({ file: this.fileBlob }));\n  }\n\n\n  isPending = (status: FileUploadStatus) => status === FileUploadStatus.Pending;\n  isSuccess = (status: FileUploadStatus) => status === FileUploadStatus.Success;\n  isError = (status: FileUploadStatus) => status === FileUploadStatus.Error;\n  inProgress = (status: FileUploadStatus) => status === FileUploadStatus.Progress;\n\n\n  loadImage() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.width = '460px';\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n\n    this.dialog.open(ShowIpfsImageComponent, dialogConfig);\n\n  }\n\n  onCreate(): void {\n    const { valid } = this.frmGroup;\n\n    if (valid) {\n      const { fileArg, ...model } = this.frmGroup.value;\n      this.store$.dispatch(PurchaseContractActions.createPurchaseContract({ payload: model }));\n    }\n\n  }\n\n  ngOnDestroy(): void {\n\n    this.store$.dispatch(IpfsImageActions.reset());\n  }\n\n}\n","\nimport { ChangeDetectionStrategy, Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable, combineLatest, fromEvent } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, startWith, delay } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport * as fromStore from '../../store/reducers';\nimport { PurchaseWidgetModel } from '../../models';\n\n@Component({\n  selector: 'app-view-product-collection',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './view-product-collection.component.html',\n\n})\nexport class ViewProductCollectionComponent implements OnInit, AfterViewInit {\n\n\n  @ViewChild('contractKey') contractKey: ElementRef;\n\n  filteredProducts$: Observable<PurchaseWidgetModel[]>;\n\n  constructor(\n    private store$: Store<fromStore.AppState>,\n    private router: Router\n\n  ) { }\n\n  /*based on https://alligator.io/angular/viewchild-access-component/\n      *Notice that we wait for the AfterViewInit lifecycle hook to access our variable,\n      * as this is when child components/DOM elements and directives become available\n      *\n      * */\n  ngAfterViewInit() {\n    const products$ = this.store$.pipe(select(fromStore.getAllProducts));\n\n    const filter$ = fromEvent(this.contractKey.nativeElement, 'keyup').pipe(\n      map(event => this.contractKey.nativeElement.value),\n      startWith(''),\n      debounceTime(150),\n      distinctUntilChanged());\n\n    this.filteredProducts$ = combineLatest([products$, filter$]).pipe(\n      map(([products, filterString]) => products.filter(product => product.productKey.indexOf(filterString) !== -1))\n    );\n\n    // based on https://blog.angular-university.io/angular-debugging/\n    setTimeout(() => {\n      this.contractKey.nativeElement.focus();\n    }, 150);\n\n  }\n\n  selectPurchaseContract(product: PurchaseWidgetModel) {\n    this.router.navigate(['market-place/products', product.productKey]);\n  }\n\n  ngOnInit() {\n\n  }\n\n\n}\n\n\n\n","\nimport { Component, OnInit, OnDestroy, ChangeDetectionStrategy, } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { map, takeUntil, tap, filter, switchMap } from 'rxjs/operators';\nimport { Subject, Observable } from 'rxjs';\nimport * as fromStore from '../../store/reducers';\nimport * as fromRoot from '../../../core/store/reducers';\nimport { PurchaseContractActions, IpfsImageActions } from '../../store/actions';\nimport { PurchaseContractModel } from '../../models';\n\n@Component({\n  selector: 'app-view-purchase-contract',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n\n      <app-purchase-contract-detail\n        *ngIf=\"{ purchaseContract: selectedPurchaseContract$|async,\n          image: image$|async,\n          account: account$|async } as values;\"\n        [contract]=\"values.purchaseContract\"\n        [image] = \"values.image\"\n        [account] = \"values.account\"\n        (remove)=\"removePurchaseContract($event)\"\n        (abortMe)=\"abortPurchaseContract()\"\n        (buy)=\"confirmBuy($event)\"\n        (delivery)=\"confirmDelivery()\"\n        (releaseEscrow)=\"withdrawBySeller()\"\n        (receiveCommission)=\"withdrawByOwner()\"\n        >\n      </app-purchase-contract-detail>\n    `,\n})\nexport class ViewPurchaseContractComponent implements OnInit, OnDestroy {\n\n  account$: Observable<string>;\n  selectedPurchaseContract$: Observable<PurchaseContractModel>;\n  image$: Observable<Blob>;\n\n  constructor(\n    private store$: Store<fromStore.AppState>,\n  ) { }\n\n  private unsubscribe$: Subject<void> = new Subject<void>();\n\n  ngOnInit() {\n\n    this.selectedPurchaseContract$ = this.store$.pipe(\n      select(fromStore.getSelectedProductWidget),\n      filter(product => !!product),\n      tap(product => this.store$.dispatch(PurchaseContractActions.loadPurchaseContract({ address: product.contractAddress }))),\n     /* Function that enables angular http client \n        \n          https://brianflove.com/2017/11/02/angular-http-client-blob/\n    */ \n    switchMap(() => this.store$.select(fromStore.getSelectedPurchaseContract)),\n      filter(contract => !!contract),\n    );\n\n\n    this.image$ = this.store$.pipe(\n      select(fromStore.getSelectedPurchaseContract),\n      filter(contract => !!contract),\n      tap(contract =>\n        this.store$.dispatch(IpfsImageActions.downloadImage({ ipfsHash: contract.ipfsHash }))\n      ),\n      //Observable Switch as  Described Earlier in the Code \n      switchMap(() => this.store$.select(fromStore.getImageBlob)),\n      filter(image => !!image)\n    );\n\n\n    this.account$ = this.store$.pipe(select(fromRoot.getAccount));\n\n  }\n\n  removePurchaseContract(key: string) {\n    this.store$.dispatch(PurchaseContractActions.removePurchaseContract({ key }));\n  }\n\n  abortPurchaseContract() {\n    this.store$.dispatch(PurchaseContractActions.abortSelectedPurchaseContract());\n  }\n\n  confirmBuy(eth: string) {\n    // console.log(`Buyer pays: ${eth}`);\n    this.store$.dispatch(PurchaseContractActions.confirmBuy({eth}));\n  }\n\n  confirmDelivery() {\n    this.store$.dispatch(PurchaseContractActions.confirmDelivery());\n  }\n\n  withdrawBySeller() {\n    this.store$.dispatch(PurchaseContractActions.releaseEscrow());\n  }\n\n  withdrawByOwner() {\n    this.store$.dispatch(PurchaseContractActions.withdrawByOwner());\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n\n  }\n\n}\n\n","\nexport * from './products-loaded.guard';\n\n","\n\nimport { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Store, select } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { take, tap, filter, switchMap, catchError } from 'rxjs/operators';\nimport { MarketPlaceAnchorModule } from '../market-place-anchor.module';\nimport * as fromStore from '../store/reducers';\nimport { PurchaseContractActions } from '../store/actions';\n\n\n@Injectable({\n  providedIn: MarketPlaceAnchorModule\n})\nexport class ProductsLoadedGuard implements CanActivate {\n  constructor(private store: Store<fromStore.AppState>) { }\n\n  canActivate(): Observable<boolean> {\n    return this.waitForProductsToLoad().pipe(\n\n      switchMap(() => of(true)),\n      catchError(() => of(false))\n    );\n  }\n\n\n  waitForProductsToLoad(): Observable<boolean> {\n    return this.store.pipe(\n      select(fromStore.isProductsLoaded),\n      tap(loaded => {\n        if (!loaded) {\n          this.store.dispatch(PurchaseContractActions.loadProducts());\n\n        }\n      }),\n      // Notice that the filter() returns the observable sequence that contains elements\n      // from the input sequence that satisfy the condition.\n      // so in this case, if the loaded is false, the steam will not continue, but\n      // when the loaded is true, we grab this bool value. Which means we are waiting for the\n      // loaded value has become true and then we continue the stream and take this one value .\n      // after that the whole stream will be completed.\n      filter(loaded => loaded),\n      take(1)\n    );\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n//I was trying to follow the idea to avoid the Circular Dependencies warning\n// https://medium.com/@tomastrajan/total-guide-to-angular-6-dependency-injection-providedin-vs-providers-85b7a347b59f\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class MarketPlaceAnchorModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport * as fromContainers from './containers';\nimport * as fromComponents from './components';\nimport * as guards from './guards';\n\n\n/*\n- The multiple routes work like an ‘&&’ condition in javascript, i.e., angular won’t execute the later guards, if the first one fails.\n- The prioritization works by giving the guard closest to the root of the application the highest priority.\nAs a result, if a child guard returns false but its parent hasn’t resolved yet,\nit’ll wait until the parent resolves. If the parent guard check fails,\nit’ll take priority over all the others.\n*/\n\n/*\nThe path-matching strategy, one of 'prefix' or 'full'. Default is 'prefix'.\n\nBy default, the router checks URL elements from the left to see if the URL matches a given path,\nand stops when there is a match. For example, '/team/11/user' matches 'team/:id'.\n\nThe path-match strategy 'full' matches against the entire URL.\nIt is important to do this when redirecting empty-path routes.\n Otherwise, because an empty path is a prefix of any URL,\n the router would apply the redirect even when navigating to the redirect destination,\n  creating an endless loop.\n*/\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'products',\n    pathMatch: 'full',\n  },\n\n  {\n    path: 'products',\n    component: fromComponents.MarketPlaceHomeComponent,\n    children: [\n      {\n        path: '',\n        component: fromContainers.ViewProductCollectionComponent,\n        canActivate: [guards.ProductsLoadedGuard],\n        children: [\n          {\n            path: ':id',\n            component: fromContainers.ViewPurchaseContractComponent,\n          },\n          {\n            path: '',\n            component: fromComponents.ProductDetailHomeComponent\n          },\n\n        ]\n\n      },\n      {\n        path: 'make/new',\n        component: fromContainers.NewPurchaseContractComponent,\n        pathMatch: 'full',\n      },\n\n    ]\n  }\n\n];\n\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes),\n  ],\n  exports: [RouterModule]\n})\nexport class MarketPlaceRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule, FlexLayoutModule } from '../shared';\nimport { MarketPlaceRoutingModule } from './market-place-routing.module';\n\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { reducers } from './store/reducers';\nimport { IpfsUploadEffects } from './store/effects/ipfs-product-image.effects';\nimport { PurchaseContractEffects } from './store/effects/purchase-contract.effects';\n\nimport * as fromContainers from './containers';\nimport * as fromComponents from './components';\n\nimport { MarketPlaceAnchorModule } from './market-place-anchor.module';\n\n\nexport const CONTAINERS = [\n    fromContainers.NewPurchaseContractComponent,\n    fromContainers.ViewProductCollectionComponent,\n    fromContainers.ViewPurchaseContractComponent\n\n  ];\n\nexport const COMPONENTS = [\n    fromComponents.MarketPlaceHomeComponent,\n    fromComponents.ShowIpfsImageComponent,\n    fromComponents.PurchaseContractListComponent,\n    fromComponents.ProductDetailHomeComponent,\n    fromComponents.PurchaseContractDetailComponent\n  ];\n\n\n@NgModule({\n  declarations: [COMPONENTS, CONTAINERS],\n\n\n  /*based on https://alligator.io/angular/anatomy-angular-module/\n     * This is for components that can�t be found by the Angular compiler during compilation time\n     * because they are not referenced anywhere in component templates.\n\n      Components that should go into entryComponents are not that common.\n      A good example would be Angular Material dialogs, because they are created dynamically,\n      and the Angular compiler would not know about them otherwise.\n     * */\n  entryComponents: [\n    fromComponents.ShowIpfsImageComponent,\n  ],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FlexLayoutModule ,\n    ReactiveFormsModule,\n    MarketPlaceAnchorModule,\n    MarketPlaceRoutingModule,\n\n    StoreModule.forFeature('purchaseContract', reducers),\n    EffectsModule.forFeature([IpfsUploadEffects, PurchaseContractEffects])\n  ],\n})\nexport class MarketPlaceModule { }\n","\nexport * from './purchase-contract.model';\nexport * from './purchase-widget.model';\n","\n\nexport enum ContractState {\n  Created = 0,\n  Locked,\n  Canceled,\n  ItemReceived,\n  SellerPaid,\n  OwnerPaid,\n  Completed\n}\n\nexport interface PurchaseContractModel {\n    productKey: string;\n    contractAddress: string;\n    sellerAddress: string;\n    buyerAddress?: string;   // optional as item may not under contract yet by the buyer\n    ownerAddress: string;\n    price: string;  // $ETH\n    balance: string;  // $ETH\n    description: string;\n    ipfsHash: string;\n    state: ContractState;\n    commission?: number;\n}\n","\nimport { Injectable } from '@angular/core';\nimport { MarketPlaceAnchorModule } from '../market-place-anchor.module';\nimport { FleaMarketContractToken } from './tokens/flea-market-contract-token';\nimport { Observable, from, of, forkJoin } from 'rxjs';\nimport { map, tap, switchMap, mergeMap, exhaustMap } from 'rxjs/operators';\nimport { ethers, utils } from 'ethers';\nimport { PurchaseWidgetModel } from '../models';\n\n@Injectable({ providedIn: MarketPlaceAnchorModule })\nexport class FleaMarketContractService {\n  constructor(private contractToken: FleaMarketContractToken) {\n  }\n\n  public createPurchaseContract(product: any): Observable<string> {\n\n    const commission = Math.floor(parseFloat(product.commission) * 100);\n    const bytes32Key = utils.formatBytes32String(product.productKey);\n    const wei = utils.parseEther(product.etherValue);\n/*\n     based on https://docs.ethers.io/ethers.js/html/cookbook-contracts.html\n    Call the contract method, getting back the transaction tx\n  */\n    const token =\n      this.contractToken.createPurchaseContract(bytes32Key, product.description, product.ipfsHash, commission, {\n        value: wei\n      });\n    return from(token)\n      .pipe(\n        switchMap((tx: any) => {\n\n          console.log('Transaction', tx);\n          // Wait for transaction to be mined\n          // Returned a Promise which would resolve to the TransactionReceipt once it is mined.\n          return from(tx.wait()).pipe(\n            tap((txReceipt: any) => console.log('TransactionReceipt: ', txReceipt)),\n\n            // The receipt will have an \"events\" Array, which will have\n            // the emitted 'event LogCreatePurchaseContract(address sender, address contractAddress)'.\n            map(txReceipt => txReceipt.events.pop()),\n            map(txEvent => txEvent.args.contractAddress),\n            tap(address => console.log('address: ', address)));\n        }));\n\n  }\n\n  // The following function shows how to use a first observable in the project  \n  private widgetObservable = (id: number): Observable<PurchaseWidgetModel> =>\n    from(this.contractToken.getContractKeyAtIndex(id)).pipe(\n      switchMap(key => from(this.contractToken.getContractByKey(key)).pipe(\n        map(address => {\n\n          const widget: PurchaseWidgetModel = {\n            productKey: utils.parseBytes32String(key as ethers.utils.Arrayish),\n            contractAddress: address as string\n          };\n\n          return widget;\n\n        })\n      ))\n    )\n\n  // The following function is based on https://www.learnrxjs.io/operators/combination/forkjoin.html\n  public getPurchaseContractList(): Observable<PurchaseWidgetModel[]> {\n\n    return from(this.contractToken.getContractCount()).pipe(\n\n      map((bigNumber: ethers.utils.BigNumber) => bigNumber.toNumber()),\n      tap((contractCount: number) => console.log('contractCount: ', contractCount)),\n\n      switchMap((contractCount: number) => {\n\n        if (contractCount === 0) {\n          return of([]);\n        } else {\n          // we get array [0,1,....contractCount-1]\n          const countArr: number[] = Array.from(Array(contractCount)).map((e, i) => i);\n          const source = of(countArr);\n\n          return source.pipe(\n            mergeMap(ids => forkJoin(ids.map(this.widgetObservable)))\n\n          );\n\n        }\n      })\n    );\n  }\n\n  public getName(): Observable<string> {\n\n    return from(this.contractToken.contractName()).pipe(\n      map(name => name as string)\n    );\n\n  }\n\n  public removePurchaseContract(productKey: string): Observable<string> {\n\n    const bytes32Key = utils.formatBytes32String(productKey);\n\n    // The following function is based on https://docs.ethers.io/ethers.js/html/cookbook-contracts.html\n    // The function Calls the contract method, getting back the transaction tx\n    const token = this.contractToken.removeContractByKey(bytes32Key);\n    return from(token)\n      .pipe(\n        switchMap((tx: any) => {\n\n          console.log('removeContractByKey Transaction', tx);\n          // Wait for transaction to be mined\n          // Returned a Promise which would resolve to the TransactionReceipt once it is mined.\n          return from(tx.wait()).pipe(\n            tap((txReceipt: any) => console.log('TransactionReceipt: ', txReceipt)),\n\n            // The receipt will have an \"events\" Array, which will have\n            // the emitted event from the Contract. The \"LogRemovePurchaseContract(address sender, bytes32 key))\n            // call is the last event.\n            map(txReceipt => txReceipt.events.pop()),\n            tap(txEvent => console.log('txEvent: ', txEvent)),\n            map(txEvent => {\n              // retrieve the key parameter value from the event\n              const key = txEvent.args.key;\n              return utils.parseBytes32String(key as ethers.utils.Arrayish);\n            }),\n\n          );\n        }));\n\n  }\n\n\n}\n\n\n\n\n","\nimport { Injectable } from '@angular/core';\nimport { MarketPlaceAnchorModule } from '../market-place-anchor.module';\nimport { EthersWeb3Token } from './tokens/ethers-web3-token';\nimport { Observable, from, of, zip } from 'rxjs';\nimport { map, mapTo, tap, switchMap, catchError } from 'rxjs/operators';\nimport { ethers, Contract, utils } from 'ethers';\nimport { PurchaseContractModel, ContractState } from '../models';\n\n@Injectable({ providedIn: MarketPlaceAnchorModule })\nexport class PurchaseContractService {\n\n  private readonly abi = [\n    'function key() view returns(bytes32 key)',\n    'function description() view returns(string description)',\n    'function seller() view returns(address sellerAddress)',\n    'function buyer() view returns(address buyerAddress)',\n    'function owner() view returns(address ownerAddress)',\n    'function price()  view returns(uint weiPrice)',\n    'function balanceOf() view returns(uint weiBalance)',\n    'function ipfsImageHash() view returns(string ipfsHash)',\n    'function state() view returns(uint8 state)',\n    'function commissionRate() view returns (uint commission)',\n\n    'event LogCanceledBySeller(address indexed sender, uint256 amount, bytes32 key)',\n    'function abortBySeller() returns (bool result)',\n\n    'event LogPurchaseConfirmed(address indexed sender, uint256 amount, bytes32 key)',\n    'function buyerPurchase() payable returns (bool result)',\n\n    'event LogReceivedByBuyer(address indexed sender, uint256 amount, bytes32 key)',\n    'function buyerConfirmReceived() returns (bool result)',\n\n    'event LogWithdrawBySeller(address indexed sender, uint256 amount, bytes32 key)',\n    'function withdrawBySeller() returns (bool result)',\n\n    'event LogWithdrawByOwner(address indexed sender, uint256 amount, bytes32 key)',\n    'function withdrawByOwner() returns (bool result)',\n\n  ];\n\n  constructor(private provider: EthersWeb3Token) {\n  }\n\n  public loadPurchaseContract(contractAddress: string): Observable<PurchaseContractModel> {\n\n    // We connect to the Contract using a Provider, so we will only\n    // have read-only access to the Contract\n    const contract: Contract = new ethers.Contract(contractAddress, this.abi, this.provider.getSigner());\n\n    const crObservable: Observable<number | null> = from(contract.commissionRate()).pipe(\n      map((commission: ethers.utils.BigNumber) => commission.toNumber()),\n\n      // only account with deployer or seller can retrieve this value,\n      // otherwise the contract will throw error.\n      catchError((err: Error) => of(null))\n    );\n\n    // based on https://scotch.io/tutorials/rxjs-operators-for-dummies-forkjoin-zip-combinelatest-withlatestfrom\n    return zip(\n      from(contract.key()),\n      from(contract.seller()),\n      from(contract.buyer()),\n      from(contract.owner()),\n      from(contract.price()),\n      from(contract.balanceOf()),\n      from(contract.description()),\n      from(contract.ipfsImageHash()),\n      from(contract.state()),\n      from(crObservable),\n\n    )\n      .pipe(\n\n        map(([key, sellerAddress, buyerAddress, ownerAddress, weiPrice, weiBalance, description, ipfsHash, state, commission]) => {\n\n          console.log(`key: ${key}, weiPrice: ${weiPrice}, state: ${state}, commission: ${commission}`);\n          // key: 0x706967794d6f64656c3030303500000000000000000000000000000000000000, weiPrice: 500000000000000, state: 0\n          const product: PurchaseContractModel = {\n\n            productKey: utils.parseBytes32String(key as ethers.utils.Arrayish),\n            contractAddress,\n            sellerAddress: sellerAddress as string,\n            buyerAddress: (buyerAddress === ethers.constants.AddressZero) ? null : buyerAddress as string,\n            ownerAddress: ownerAddress as string,\n            price: utils.formatEther(weiPrice as ethers.utils.BigNumberish),  // $ETH\n            balance: utils.formatEther(weiBalance as ethers.utils.BigNumberish),  // $ETH\n            description: description as string,\n            ipfsHash: ipfsHash as string,\n            state: state as ContractState,\n            commission: commission ? commission as number : null\n          };\n\n          return product;\n\n        }),\n\n      );\n\n  }\n\n\n  public abortPurchaseContract(contractAddress: string): Observable<string> {\n\n    // We connect to the Contract using a Provider, so we will only\n    // have read-only access to the Contract\n    const contract: Contract = new ethers.Contract(contractAddress, this.abi, this.provider.getSigner());\n\n    // based on https://docs.ethers.io/ethers.js/html/cookbook-contracts.html\n    // Call the contract method, getting back the transaction tx\n    const token = contract.abortBySeller();\n    // 'from' operator can be used to convert a promise to an observable\n    return from(token)\n      .pipe(\n        switchMap((tx: any) => {\n\n          console.log('abortBySeller Tx:', tx);\n          // Wait for transaction to be mined\n          // Returned a Promise which would resolve to the TransactionReceipt once it is mined.\n          return from(tx.wait()).pipe(\n            tap((txReceipt: any) => console.log('txReceipt: ', txReceipt)),\n\n            // The receipt will have an \"events\" Array, which will have\n            // the emitted event from the Contract. The \"LogCanceledBySeller\"\n            // is the last event.\n            map(txReceipt => txReceipt.events.pop()),\n            tap(txEvent => console.log('event: ', txEvent.event)),\n            mapTo(contractAddress),\n\n          );\n        }));\n\n  }\n\n  public confirmPurchase(contractAddress: string, etherValue: string): Observable<string> {\n\n    // We connect to the Contract using a Provider, so we will only\n    // have read-only access to the Contract\n    const contract: Contract = new ethers.Contract(contractAddress, this.abi, this.provider.getSigner());\n\n    const wei = utils.parseEther(etherValue);\n    // based on https://docs.ethers.io/ethers.js/html/cookbook-contracts.html\n    // Call the contract method, getting back the transaction tx\n    const token = contract.buyerPurchase({\n      value: wei\n    });\n\n    return from(token)\n      .pipe(\n        switchMap((tx: any) => {\n\n          console.log('buyerConfirmPurchase Tx:', tx);\n          // Wait for transaction to be mined\n          // Returned a Promise which would resolve to the TransactionReceipt once it is mined.\n          return from(tx.wait()).pipe(\n            tap((txReceipt: any) => console.log('txReceipt: ', txReceipt)),\n\n            // The receipt will have an \"events\" Array, which will have\n            // the emitted event from the Contract. The \"LogPurchaseConfirmed\"\n            // call is the last event.\n            map(txReceipt => txReceipt.events.pop()),\n            tap(txEvent => console.log('event: ', txEvent.event)),\n            mapTo(contractAddress),\n\n          );\n        }));\n  }\n\n\n  public confirmDelivery(contractAddress: string): Observable<string> {\n\n    // We connect to the Contract using a Provider, so we will only\n    // have read-only access to the Contract\n    const contract: Contract = new ethers.Contract(contractAddress, this.abi, this.provider.getSigner());\n\n    // based on https://docs.ethers.io/ethers.js/html/cookbook-contracts.html\n    // Call the contract method, getting back the transaction tx\n    const token = contract.buyerConfirmReceived();\n    return from(token)\n      .pipe(\n        switchMap((tx: any) => {\n\n          console.log('buyerConfirmReceived Tx:', tx);\n          // Wait for transaction to be mined\n          // Returned a Promise which would resolve to the TransactionReceipt once it is mined.\n          return from(tx.wait()).pipe(\n            tap((txReceipt: any) => console.log('txReceipt: ', txReceipt)),\n\n            // The receipt will have an \"events\" Array, which will have\n            // the emitted event from the Contract. The \"LogReceivedByBuyer\"\n            // call is the last event.\n            map(txReceipt => txReceipt.events.pop()),\n            tap(txEvent => console.log('event: ', txEvent.event)),\n            mapTo(contractAddress),\n\n          );\n        }));\n\n  }\n\n  public withdrawBySeller(contractAddress: string): Observable<string> {\n\n    const contract: Contract = new ethers.Contract(contractAddress, this.abi, this.provider.getSigner());\n\n    // based on https://docs.ethers.io/ethers.js/html/cookbook-contracts.html\n    // Call the contract method, getting back the transaction tx\n    const token = contract.withdrawBySeller();\n    return from(token)\n      .pipe(\n        switchMap((tx: any) => {\n\n          console.log('withdrawBySeller Tx:', tx);\n          // Wait for transaction to be mined\n          // Returned a Promise which would resolve to the TransactionReceipt once it is mined.\n          return from(tx.wait()).pipe(\n            tap((txReceipt: any) => console.log('txReceipt: ', txReceipt)),\n\n            // The receipt will have an \"events\" Array, which will have\n            // the emitted event from the Contract. The \"LogWithdrawBySeller\"\n            //  is the last event.\n            map(txReceipt => txReceipt.events.pop()),\n            // tslint:disable-next-line:max-line-length\n            tap(txEvent => console.log(`event: ${txEvent.event}, sent by: ${txEvent.args.sender}, withdrawal amount: ${txEvent.args.amount}`)),\n            map(txEvent => ethers.utils.formatEther(txEvent.args.amount))\n\n          );\n        }));\n\n  }\n\n  public withdrawByOwner(contractAddress: string): Observable<string> {\n\n    const contract: Contract = new ethers.Contract(contractAddress, this.abi, this.provider.getSigner());\n\n    // based on https://docs.ethers.io/ethers.js/html/cookbook-contracts.html\n    // Call the contract method, getting back the transaction tx\n    const token = contract.withdrawByOwner();\n    return from(token)\n      .pipe(\n        switchMap((tx: any) => {\n\n          console.log('withdrawByOwner Tx:', tx);\n          // Wait for transaction to be mined\n          // Returned a Promise which would resolve to the TransactionReceipt once it is mined.\n          return from(tx.wait()).pipe(\n            tap((txReceipt: any) => console.log('txReceipt: ', txReceipt)),\n\n            // The receipt will have an \"events\" Array, which will have\n            // the emitted event from the Contract. The \"LogWithdrawBySeller\"\n            //  is the last event.\n            map(txReceipt => txReceipt.events.pop()),\n            // tslint:disable-next-line:max-line-length\n            tap(txEvent => console.log(`event: ${txEvent.event}, sent by: ${txEvent.args.sender}, withdrawal amount: ${txEvent.args.amount}`)),\n            map(txEvent => ethers.utils.formatEther(txEvent.args.amount))\n\n          );\n        }));\n\n  }\n\n\n}\n\n\n\n\n","\nimport { Injectable, Inject } from '@angular/core';\nimport { providers } from 'ethers';\nimport { EthereumProviderToken } from '../../../core/services/tokens';\nimport { MarketPlaceAnchorModule } from '../../market-place-anchor.module';\n\n\n@Injectable({ providedIn: MarketPlaceAnchorModule })\nexport class EthersWeb3Token extends providers.Web3Provider {\n  constructor(@Inject(EthereumProviderToken) web3Provider) {\n    super(web3Provider);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Contract } from 'ethers';\nimport { EthersWeb3Token } from './ethers-web3-token';\nimport { MarketPlaceAnchorModule } from '../../market-place-anchor.module';\nimport { environment } from 'src/environments/environment';\n\nconst FLEA_MARKET_CONTRACT_ADDRESS = environment.fleaMarketContractAddress;\nconst abi = [\n  'event LogCreatePurchaseContract(address sender, bytes32 key, address contractAddress)',\n  'event LogRemovePurchaseContract(address sender, bytes32 key)',\n  'function createPurchaseContract(bytes32 key, string description, string ipfsImageHash, uint256 commissionRate) payable returns(bool createResult)',\n  'function getContractCount() view returns(uint contractCount)',\n  'function getContractKeyAtIndex(uint index) view returns(bytes32 key)',\n  'function getContractByKey(bytes32 key) view returns(address contractAddress)',\n  'function contractName() view returns(string contractName)',\n  'function removeContractByKey(bytes32 key) returns(bool result)'\n];\n\n\n@Injectable({ providedIn: MarketPlaceAnchorModule })\nexport class FleaMarketContractToken extends Contract {\n  constructor(provider: EthersWeb3Token) {\n    super(FLEA_MARKET_CONTRACT_ADDRESS, abi, provider.getSigner());\n  }\n\n}\n","\nimport * as IpfsImageActions from './ipfs-product-image.actions';\nimport * as PurchaseContractActions from './purchase-contract.actions';\n\nexport { IpfsImageActions, PurchaseContractActions};\n","\nimport { createAction, props} from '@ngrx/store';\n\nexport const reset = createAction('[IPFS/Image] Reset');  // status Pending\nexport const uploadImage = createAction('[IPFS/Image] Upload', props<{file: File}>());  // status Progress\n\nexport const uploadImageSuccess = createAction('[IPFS/Image] Upload Success', props<{ ipfsHash: string }>()); // status Success\nexport const uploadImageFail = createAction('[IPFS/Image] Upload Fail'); // status Error\nexport const downloadImage =\ncreateAction('[IPFS/Image] Download Image', props<{ ipfsHash: string }>()); // request to download image from IPFS\n\nexport const downloadImageSuccess = createAction('[IPFS/Image] Download Image Success', props<{image: Blob}>());\n\nexport const downloadImageError = createAction('[IPFS/Image] Download Image Error');\n","\nimport { createAction, props} from '@ngrx/store';\nimport { PurchaseWidgetModel, PurchaseContractModel } from '../../models';\n\nexport const createPurchaseContract = createAction('[PurchaseContract/API] Create Purchase Contract', props<{ payload: any }>());\n\nexport const createPurchaseContractSuccess =\ncreateAction('[PurchaseContract/Command] Create Purchase Contract Success', props<{ product: PurchaseWidgetModel}>());\n\n\nexport const loadProducts = createAction('[Product/API] Load Products');\nexport const loadProductsSuccess = createAction('[Product/Command] Load Products Success', props<{ products: PurchaseWidgetModel[] }>());\n\nexport const loadPurchaseContract = createAction('[PurchaseContract/API] Load Purchase Contract', props<{ address: string }>());\nexport const loadPurchaseContractSuccess =\ncreateAction('[PurchaseContract/Command] Load Purchase Contract Success', props<{ contract: PurchaseContractModel }>());\n\nexport const removePurchaseContract = createAction('[PurchaseContract/API] Remove Purchase Contract', props<{ key: string }>());\nexport const removePurchaseContractSuccess =\ncreateAction('[PurchaseContract/Command] Remove Purchase Contract Success', props<{ key: string }>());\n\nexport const abortSelectedPurchaseContract = createAction('[PurchaseContract/API] Abort Purchase Contract');\nexport const abortSelectedPurchaseContractSuccess = createAction('[PurchaseContract/Command] Abort Purchase Contract Success');\n\nexport const confirmBuy = createAction('[PurchaseContract/API] Confirm Buy', props<{ eth: string }>());\nexport const confirmBuySuccess = createAction('[PurchaseContract/Command] Confirm Buy Success');\n\nexport const confirmDelivery = createAction('[PurchaseContract/API] Confirm Product Delivery');\nexport const confirmDeliverySuccess = createAction('[PurchaseContract/Command] Confirm Product Delivery Success');\n\nexport const releaseEscrow = createAction('[PurchaseContract/API] Withdraw Escrow By Seller');\n// tslint:disable-next-line:max-line-length\nexport const releaseEscrowSuccess = createAction('[PurchaseContract/Command] Withdraw Escrow By Seller Success', props<{ amount: string }>());\n\nexport const withdrawByOwner = createAction('[PurchaseContract/API] Withdraw By Owner');\nexport const withdrawByOwnerSuccess = createAction('[PurchaseContract/Command] Withdraw By Owner Success', props<{ amount: string }>());\n\n","\nimport { Injectable } from '@angular/core';\nimport { serializeError } from 'serialize-error';\nimport { HttpClient } from '@angular/common/http';\nimport { exhaustMap, map, tap, switchMap, catchError } from 'rxjs/operators';\nimport { of, empty } from 'rxjs';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { Store, select } from '@ngrx/store';\n\nimport { IpfsDaemonService } from '../../../core/services/ipfs-daemon.services';\nimport { IpfsImageActions } from '../actions';\nimport { ErrorActions } from '../../../core/store/actions';\n\n\n\n@Injectable()\nexport class IpfsUploadEffects {\n  constructor(private ipfsSrv: IpfsDaemonService, private actions$: Actions,\n    private httpClient: HttpClient\n  ) { }\n\n\n  uploadImage$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(IpfsImageActions.uploadImage),\n        map(action => action.file),\n        exhaustMap((file) => {\n\n          return this.ipfsSrv.addFile(file).pipe(\n            tap(ipfsHash => console.log(`IPFS file hash: ${ipfsHash}`)),\n            map(ipfsHash => IpfsImageActions.uploadImageSuccess({ ipfsHash })),\n\n            catchError((err: Error) =>\n              of(this.handleError(err), IpfsImageActions.uploadImageFail())\n            )\n          );\n        })\n\n      ));\n\n  downloadImage$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(IpfsImageActions.downloadImage),\n        map((action) => action.ipfsHash),\n        switchMap((ipfsHash: string) =>\n          this.ipfsSrv.getFile(ipfsHash).pipe(\n            map((image: Blob) => IpfsImageActions.downloadImageSuccess({ image })),\n            catchError((err: Error) =>\n              of(this.handleError(err), IpfsImageActions.downloadImageError())\n            )\n          )\n        )\n\n      )\n  );\n\n  // display default error image\n  downloadImageError$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(IpfsImageActions.downloadImageError),\n\n        switchMap(() => this.httpClient.get(`./assets/img/error-human.png`, {\n          responseType: 'blob'\n        }).pipe(\n          map((image: Blob) => IpfsImageActions.downloadImageSuccess({ image })),\n          catchError((err: Error) => of(this.handleError(err)))\n        )\n        )\n\n      )\n  );\n\n  private handleError(error: Error) {\n    const friendlyErrorMessage = serializeError(error).message;\n    return ErrorActions.errorMessage({ errorMsg: friendlyErrorMessage });\n  }\n\n}\n","\nimport { Injectable } from '@angular/core';\nimport { MatDialogConfig, MatDialog } from '@angular/material/dialog';\nimport { serializeError } from 'serialize-error';\nimport {\n  map, mapTo, tap, filter, withLatestFrom,\n  switchMap, exhaustMap, catchError, concatMap, concatMapTo\n} from 'rxjs/operators';\n\nimport { of, concat } from 'rxjs';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { Router, ActivatedRouteSnapshot } from '@angular/router';\n\nimport { FleaMarketContractService } from '../../services/flea-market-contract-service';\nimport { PurchaseContractService } from '../../services/purchase-contract-service';\n\nimport * as fromStore from '../reducers';\nimport { Store, select } from '@ngrx/store';\nimport { PurchaseContractActions } from '../actions';\nimport { ErrorActions, SpinnerActions, SnackBarActions, Web3GatewayActions } from '../../../core/store/actions';\nimport { AppearanceColor, SnackBarInterface } from '../../../core/models';\nimport { ConfirmDialogComponent } from '../../../core/components/confirm-dialog/confirm-dialog.component';\n\n\n\n@Injectable()\nexport class PurchaseContractEffects {\n  constructor(\n    private store$: Store<fromStore.AppState>,\n    private fleaSrv: FleaMarketContractService,\n    private purchaseSrv: PurchaseContractService,\n    private actions$: Actions,\n    private router: Router,\n    private dialog: MatDialog\n  ) { }\n\n\n  createProduct$ = createEffect(\n    () => this.actions$.pipe(\n      ofType(PurchaseContractActions.createPurchaseContract),\n      map(action => action.payload),\n      exhaustMap((payload) => {\n\n        return this.fleaSrv.createPurchaseContract(payload).pipe(\n          tap(address => console.log('Contract address: ', address)),\n          switchMap((address: string) => {\n\n            return [\n              PurchaseContractActions.createPurchaseContractSuccess({\n                product: {\n                  productKey: payload.productKey,\n                  contractAddress: address\n                }\n              }),\n              // update ballance\n              Web3GatewayActions.getBalance()];\n          }),\n\n          catchError((err: Error) =>\n            of(this.handleError(err), SpinnerActions.hide(), Web3GatewayActions.getBalance())\n          )\n        );\n      })\n\n    ));\n\n  loadPurchaseContract$ = createEffect(\n    () => this.actions$.pipe(\n      ofType(PurchaseContractActions.loadPurchaseContract),\n      map(action => action.address),\n      switchMap(address => {\n\n        return this.purchaseSrv.loadPurchaseContract(address).pipe(\n          map(contract =>\n            PurchaseContractActions.loadPurchaseContractSuccess({ contract })),\n          catchError((err: Error) => of(this.handleError(err), SpinnerActions.hide()))\n        );\n      })\n\n    ));\n\n\n  loadProducts$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PurchaseContractActions.loadProducts),\n      switchMap(() =>\n\n        this.fleaSrv.getPurchaseContractList().pipe(\n          tap(products => console.log('purchase contracts:', products)),\n          map(products => PurchaseContractActions.loadProductsSuccess({ products })),\n          catchError((err: Error) => of(this.handleError(err), SpinnerActions.hide()))\n        )\n      )\n    ));\n\n\n  removeProduct$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(PurchaseContractActions.removePurchaseContract),\n        map(payload => payload.key),\n        switchMap(key => {\n\n          const dialogConfig = new MatDialogConfig();\n          dialogConfig.width = '420px';\n          dialogConfig.disableClose = true;\n          dialogConfig.autoFocus = true;\n          dialogConfig.data = {\n            title: 'Confirm Remove',\n            content: `Are you sure to remove contract ${key} from market?`,\n            output: key\n          };\n\n          const dialogRef = this.dialog.open(ConfirmDialogComponent, dialogConfig);\n          // Gets an observable that is notified when the dialog is finished closing.\n          return dialogRef.afterClosed();\n        }),\n        filter(result => !!result),\n        exhaustMap(result => concat(\n\n          of(SpinnerActions.show()),\n          this.fleaSrv.removePurchaseContract(result).pipe(\n            tap(productKey => console.log(`Contract has been removed: ${productKey}`)),\n            /*\n            Related to the operators mapTo and concatMapTo. These operators map to static values.\n            Sometimes you want to map to dynamic values,\n            such as using a value passed in via an action’s payload property.\n            For dynamic values, use the matching operators map or concatMap which expect a function rather than a static value.\n            */\n            concatMap(productKey =>\n              [PurchaseContractActions.removePurchaseContractSuccess({ key: productKey }),\n              Web3GatewayActions.getBalance()]\n            ),\n            catchError((err: Error) =>\n              of(this.handleError(err), SpinnerActions.hide(), Web3GatewayActions.getBalance())\n            )\n          ),\n          of(SpinnerActions.hide()),\n        ))\n\n      ));\n\n  abortContract$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(PurchaseContractActions.abortSelectedPurchaseContract),\n        withLatestFrom(this.store$.pipe(select(fromStore.getSelectedPurchaseContract))),\n        switchMap(([action, contract]) => {\n\n          const dialogConfig = new MatDialogConfig();\n          dialogConfig.width = '420px';\n          dialogConfig.disableClose = true;\n          dialogConfig.autoFocus = true;\n          dialogConfig.data = {\n            title: 'Confirm Abort',\n            content: `Are you sure you want to deactivate contract: ${contract.productKey}?`,\n            output: contract.contractAddress\n          };\n\n          const dialogRef = this.dialog.open(ConfirmDialogComponent, dialogConfig);\n          // Gets an observable that is notified when the dialog is finished closing.\n          return dialogRef.afterClosed();\n        }),\n        filter(result => !!result),\n        exhaustMap(result => concat(\n\n          of(SpinnerActions.show()),\n          this.purchaseSrv.abortPurchaseContract(result).pipe(\n            tap(address => console.log(`Successfully canceled contract: ${address} `)),\n            concatMapTo(\n              [PurchaseContractActions.abortSelectedPurchaseContractSuccess(),\n              Web3GatewayActions.getBalance()]\n            ),\n            catchError((err: Error) =>\n              of(this.handleError(err), SpinnerActions.hide(), Web3GatewayActions.getBalance())\n            )\n          ),\n          of(SpinnerActions.hide()),\n        ))\n\n      ));\n\n  confirmBuy$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(PurchaseContractActions.confirmBuy),\n        withLatestFrom(this.store$.pipe(select(fromStore.getSelectedPurchaseContract))),\n        switchMap(([payload, contract]) => {\n\n          const dialogConfig = new MatDialogConfig();\n          dialogConfig.width = '420px';\n          dialogConfig.disableClose = true;\n          dialogConfig.autoFocus = true;\n          dialogConfig.data = {\n            title: 'Confirm Purchase',\n            content: `Please confirm to deposit ${payload.eth} ETH into the contract: ${contract.productKey}`,\n            output: {\n              address: contract.contractAddress,\n              eth: payload.eth\n            }\n          };\n\n          const dialogRef = this.dialog.open(ConfirmDialogComponent, dialogConfig);\n          // Gets an observable that is notified when the dialog is finished closing.\n          return dialogRef.afterClosed();\n        }),\n        filter(result => !!result),\n        exhaustMap(result => concat(\n\n          of(SpinnerActions.show()),\n          this.purchaseSrv.confirmPurchase(result.address, result.eth).pipe(\n            tap(address => console.log(`Purchase confirmed successfully for the contract: ${address} `)),\n            concatMapTo(\n              [PurchaseContractActions.confirmBuySuccess(), Web3GatewayActions.getBalance()]\n            ),\n            catchError((err: Error) => of(this.handleError(err), Web3GatewayActions.getBalance()))\n          ),\n          of(SpinnerActions.hide())\n        ))\n\n      ));\n\n  confirmDelivery$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(PurchaseContractActions.confirmDelivery),\n        withLatestFrom(this.store$.pipe(select(fromStore.getSelectedPurchaseContract))),\n        switchMap(([payload, contract]) => {\n\n          const dialogConfig = new MatDialogConfig();\n          dialogConfig.width = '420px';\n          dialogConfig.disableClose = true;\n          dialogConfig.autoFocus = true;\n          dialogConfig.data = {\n            title: 'Confirm Delivery',\n            content: `Are you sure you want to confirm that you received the purchase item ${contract.description}`,\n            output: contract.contractAddress\n          };\n\n          const dialogRef = this.dialog.open(ConfirmDialogComponent, dialogConfig);\n          // Gets an observable that is notified when the dialog is finished closing.\n          return dialogRef.afterClosed();\n        }),\n        filter(result => !!result),\n        exhaustMap(result => concat(\n\n          of(SpinnerActions.show()),\n          this.purchaseSrv.confirmDelivery(result).pipe(\n            tap(address => console.log(`Delivery confirmed successfully for the contract: ${address} `)),\n            concatMapTo(\n              [PurchaseContractActions.confirmDeliverySuccess(), Web3GatewayActions.getBalance()]\n            ),\n            catchError((err: Error) =>\n              of(this.handleError(err), Web3GatewayActions.getBalance())\n            )\n          ),\n          of(SpinnerActions.hide()),\n        ))\n\n      ));\n\n  withdrawBySeller$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PurchaseContractActions.releaseEscrow),\n      withLatestFrom(this.store$.pipe(select(fromStore.getSelectedPurchaseContract))),\n      map(([payload, contract]) => contract.contractAddress),\n      exhaustMap((address) => {\n\n        return this.purchaseSrv.withdrawBySeller(address).pipe(\n          concatMap(eth =>\n            [PurchaseContractActions.releaseEscrowSuccess({ amount: eth }),\n            Web3GatewayActions.getBalance()]\n          ),\n          catchError((err: Error) =>\n            of(this.handleError(err), SpinnerActions.hide(), Web3GatewayActions.getBalance())\n          )\n        );\n      })\n\n    ));\n\n  withdrawByOwner$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PurchaseContractActions.withdrawByOwner),\n      withLatestFrom(this.store$.pipe(select(fromStore.getSelectedPurchaseContract))),\n      map(([payload, contract]) => contract.contractAddress),\n      exhaustMap((address) => {\n\n        return this.purchaseSrv.withdrawByOwner(address).pipe(\n          concatMap(eth =>\n            [PurchaseContractActions.withdrawByOwnerSuccess({ amount: eth }),\n            Web3GatewayActions.getBalance()]\n          ),\n          catchError((err: Error) =>\n            of(this.handleError(err), SpinnerActions.hide(), Web3GatewayActions.getBalance())\n          )\n        );\n      })\n\n    ));\n\n  removeProductRedirect$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(PurchaseContractActions.removePurchaseContractSuccess),\n        tap(_ => {\n          this.router.navigate(['/market-place']);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  reload$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(\n          PurchaseContractActions.abortSelectedPurchaseContractSuccess,\n          PurchaseContractActions.confirmBuySuccess,\n          PurchaseContractActions.confirmDeliverySuccess,\n          PurchaseContractActions.releaseEscrowSuccess,\n          PurchaseContractActions.withdrawByOwnerSuccess),\n        withLatestFrom(this.store$.pipe(select(fromStore.getSelectedPurchaseContract))),\n        tap(async ([action, contract]) => {\n\n          // here is the trick to make  this.selectedPurchaseContract$ emit\n          // on the same route\n          // we need to reload on the same route\n          // based on https://github.com/angular/angular/issues/13831\n          this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n          this.router.navigate(['/market-place/products', contract.productKey]);\n\n        })\n      ),\n    { dispatch: false }\n  );\n\n  showSpinner$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PurchaseContractActions.createPurchaseContract,\n        PurchaseContractActions.loadProducts,\n        PurchaseContractActions.loadPurchaseContract,\n        PurchaseContractActions.releaseEscrow,\n        PurchaseContractActions.withdrawByOwner\n      ),\n      // Related to the operators mapTo and concatMapTo. These operators map to static values.\n      mapTo(SpinnerActions.show())\n    )\n  );\n\n  hideSpinner$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PurchaseContractActions.createPurchaseContractSuccess,\n        PurchaseContractActions.loadProductsSuccess,\n        PurchaseContractActions.loadPurchaseContractSuccess,\n        PurchaseContractActions.releaseEscrowSuccess,\n        PurchaseContractActions.withdrawByOwnerSuccess\n      ),\n      mapTo(SpinnerActions.hide())\n    )\n  );\n\n  showSnackbarOnCreateContract$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PurchaseContractActions.createPurchaseContractSuccess),\n      map((payload) => {\n\n        const msg: SnackBarInterface = {\n          message: `New smart product contract has been created successfully: Address: ${payload.product.contractAddress}`,\n          color: AppearanceColor.Success\n        };\n\n        return SnackBarActions.open({ payload: msg });\n      })\n    )\n  );\n\n  showSnackbarOnReleaseEscrow$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PurchaseContractActions.releaseEscrowSuccess),\n      map((payload) => {\n\n        const msg: SnackBarInterface = {\n          message: `Fund in amount: ${payload.amount} ETH has been successfully release back to Seller`,\n          color: AppearanceColor.Success\n        };\n\n        return SnackBarActions.open({ payload: msg });\n      })\n    )\n  );\n\n  showSnackbarOnReceiveCommission$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PurchaseContractActions.withdrawByOwnerSuccess),\n      map((payload) => {\n\n        const msg: SnackBarInterface = {\n          message: `Commission in amount: ${payload.amount} ETH has been successfully transferred to Owner`,\n          color: AppearanceColor.Success\n        };\n\n        return SnackBarActions.open({ payload: msg });\n      })\n    )\n  );\n\n  showSnackbarOnSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(PurchaseContractActions.abortSelectedPurchaseContractSuccess,\n        PurchaseContractActions.confirmBuySuccess,\n        PurchaseContractActions.confirmDeliverySuccess\n      ),\n      withLatestFrom(this.store$.pipe(select(fromStore.getSelectedPurchaseContract))),\n      map(([action, contract]) => {\n\n        let msg = '';\n\n        if (action.type === '[PurchaseContract/Command] Abort Purchase Contract Success') {\n          msg = `The request made by the seller to abort the contract '${contract.description}' has been confirmed!`;\n        } else if (action.type === '[PurchaseContract/Command] Confirm Buy Success') {\n          msg = `Deposit fund made by the buyer for item '${contract.description}' has been confirmed!`;\n        } else if (action.type === '[PurchaseContract/Command] Confirm Product Delivery Success') {\n          msg = `Receiving item '${contract.description}' by the buyer has been confirmed!`;\n        }\n\n        return SnackBarActions.open({\n          payload: {\n            message: msg,\n            color: AppearanceColor.Success\n          }\n        });\n      })\n    )\n  );\n\n  private handleError(error: Error) {\n    const friendlyErrorMessage = serializeError(error).message;\n    return ErrorActions.errorMessage({ errorMsg: friendlyErrorMessage });\n  }\n}\n","\nimport {\n  createSelector,\n  createFeatureSelector,\n  Action,\n  combineReducers,\n} from '@ngrx/store';\n\nimport * as fromRoot from '../../../core/store/reducers';\nimport * as fromIpfs from './ipfs-product-image.reducer';\nimport * as fromProducts from './purchase-contract.reducer';\n\n\nexport interface PurchaseContractState {\n  ipfs: fromIpfs.State;\n  products: fromProducts.State;\n}\n\n\nexport interface AppState extends fromRoot.AppState {\n  purchaseContract: PurchaseContractState;\n}\n\nexport function reducers(state: PurchaseContractState | undefined, action: Action) {\n  return combineReducers({\n    ipfs: fromIpfs.reducer,\n    products: fromProducts.reducer\n  })(state, action);\n}\n\n\nexport const selectPurchaseContractState = createFeatureSelector<AppState, PurchaseContractState>(\n  'purchaseContract'\n);\n\nexport const selectIpfsState = createSelector(selectPurchaseContractState, state => state.ipfs);\n\nexport const getIpfsUploadStatus = createSelector(selectIpfsState, fromIpfs.getIpfsUploadStatus);\nexport const getIpfsHash = createSelector(selectIpfsState, fromIpfs.getIpfsHash);\nexport const getImageBlob = createSelector(selectIpfsState, fromIpfs.getImageBlob);\n\n// ********************************************************************************\nexport const getProductEntitiesState = createSelector(selectPurchaseContractState, state => state.products);\n\n\n/**\n * Adapters created with @ngrx/entity generate\n * commonly used selector functions including\n * getting all ids in the record set, a dictionary\n * of the records by id, an array of records and\n * the total number of records. This reduces boilerplate\n * in selecting records from the entity state.\n */\nexport const {\n  selectIds: getProductKeys,\n  selectEntities: getProductEntities,\n  selectAll: getAllProducts,\n  selectTotal: getTotalProducts,\n} = fromProducts.adapter.getSelectors(getProductEntitiesState);\n\n\nexport const isProductsLoaded = createSelector(getProductEntitiesState, state => state.loaded);\nexport const getSelectedPurchaseContract = createSelector(getProductEntitiesState, state => state.selectedPurchaseContract);\n\n\n// select product widget entity based on the route param id\nexport const getSelectedProductWidget = createSelector(\n  getProductEntities,\n  fromRoot.selectRouteParams,\n  (entities, params) => params && entities[params.id]\n);\n\n\n","\nimport { createReducer, on } from '@ngrx/store';\nimport * as IpfsUploadActions from '../actions/ipfs-product-image.actions';\n\nexport enum FileUploadStatus {\n  Pending = 'Pending',\n  Success = 'Success',\n  Error = 'Error',\n  Progress = 'Progress',\n}\n\nexport interface State {\n    status: FileUploadStatus;\n    ipfsHash: string | null;\n    imageBlob?: Blob;\n}\n\nconst initialState: State = {\n    status: FileUploadStatus.Pending,\n    ipfsHash: null,\n    imageBlob: null\n};\n\nexport const reducer = createReducer(\n  initialState,\n  on(IpfsUploadActions.reset, () => initialState),\n  on(IpfsUploadActions.uploadImage, state => ({\n    ...state,\n    status: FileUploadStatus.Progress,\n  })),\n  on(IpfsUploadActions.uploadImageSuccess, (state, { ipfsHash }) => ({\n    ...state,\n    status: FileUploadStatus.Success,\n    ipfsHash\n  })),\n  on(IpfsUploadActions.uploadImageFail, state => ({\n    ...state,\n    status: FileUploadStatus.Error,\n    ipfsHash: null\n  })),\n  on(IpfsUploadActions.downloadImageSuccess, (state, { image }) => ({\n    ...state,\n    imageBlob: image\n  })),\n\n);\n\nexport const getIpfsUploadStatus = (state: State) => state.status;\nexport const getIpfsHash = (state: State) => state.ipfsHash;\nexport const getImageBlob =  (state: State) => state.imageBlob;\n","\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { PurchaseWidgetModel, PurchaseContractModel } from '../../models';\nimport { PurchaseContractActions } from '../actions';\n\n\nexport interface State extends EntityState<PurchaseWidgetModel> {\n  loaded: boolean;\n  selectedPurchaseContract: PurchaseContractModel;\n}\n\nexport function sortByKey(a: PurchaseWidgetModel, b: PurchaseWidgetModel): number {\n  return a.productKey.localeCompare(b.productKey);\n}\n\n// based on https://next.ngrx.io/guide/entity/adapter\nexport const adapter: EntityAdapter<PurchaseWidgetModel> = createEntityAdapter<PurchaseWidgetModel>({\n  selectId: (product: PurchaseWidgetModel) => product.productKey,\n  sortComparer: sortByKey,\n});\n\n\nexport const initialState: State = adapter.getInitialState({\n  loaded: false,\n  selectedPurchaseContract: null\n});\n\nexport const reducer = createReducer(\n  initialState,\n  /**\n   * based on https://blog.angular-university.io/ngrx-entity/\n   * addAll: replaces the whole collection with a new one\n   *  If the collection is to be sorted, the adapter will\n   * sort each record upon entry into the sorted array.\n   */\n  on(\n    PurchaseContractActions.loadProductsSuccess,\n    (state, { products }) => adapter.setAll(products, {\n\n      ...state,\n      loaded: true,\n      selectedPurchaseContract: null\n    })\n  ),\n  on(\n    PurchaseContractActions.removePurchaseContractSuccess,\n    (state, { key }) => adapter.removeOne(key, {\n\n      ...state,\n      selectedPurchaseContract: null\n    })\n  ),\n  /**\n   * The addOne function provided by the created adapter\n   * adds one record to the entity dictionary\n   * and returns a new state including that records if it doesn't\n   * exist already. If the collection is to be sorted, the adapter will\n   * insert the new record into the sorted array.\n   */\n  on(PurchaseContractActions.createPurchaseContractSuccess, (state, { product }) => adapter.addOne(product, state)),\n  on(PurchaseContractActions.loadPurchaseContractSuccess, (state, { contract }) => ({\n    ...state,\n    selectedPurchaseContract: contract,\n\n  })),\n\n\n);\n\n"],"sourceRoot":"webpack:///"}