"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ActionResolverRunner = /** @class */ (function () {
    function ActionResolverRunner(configuration) {
        this.resolverPipeline = this.flattenResolvers(configuration);
    }
    ActionResolverRunner.prototype.run = function (actionReferences) {
        var _this = this;
        return actionReferences.reduce(function (result, actionReference) {
            var _a;
            var resolver = _this.findRule(actionReference);
            if (!resolver) {
                return result;
            }
            return __assign(__assign({}, result), (_a = {}, _a[resolver.type] = __spread(result[resolver.type], [
                resolver.rule.execute(actionReference)
            ]), _a));
        }, this.createEmptyReferenceMap());
    };
    ActionResolverRunner.prototype.findRule = function (actionReference) {
        return (this.resolverPipeline.find(function (resolver) {
            return resolver.rule.canExecute(actionReference);
        }) || null);
    };
    ActionResolverRunner.prototype.flattenResolvers = function (configuration) {
        return __spread(configuration.dispatchers.map(function (rule) { return ({
            type: 'dispatchers',
            rule: rule
        }); }), configuration.handlers.map(function (rule) { return ({
            type: 'handlers',
            rule: rule
        }); }));
    };
    ActionResolverRunner.prototype.createEmptyReferenceMap = function () {
        return {
            dispatchers: [],
            handlers: []
        };
    };
    return ActionResolverRunner;
}());
exports.ActionResolverRunner = ActionResolverRunner;
