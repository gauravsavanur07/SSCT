"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
function extractActionType(actionReference) {
    var fullQualifiedImport = actionReference.getType().getText();
    var _a = __read(/.+TypedAction<"(.*?)">.+/.exec(fullQualifiedImport) || [], 2), _b = _a[1], typedAction = _b === void 0 ? '' : _b;
    return typedAction;
}
exports.extractActionType = extractActionType;
function extractAllActionTypes(actionReference) {
    var fullQualifiedImport = (actionReference === null || actionReference === void 0 ? void 0 : actionReference.getType().getText()) || '';
    return Array.from(fullQualifiedImport.matchAll(/TypedAction<"(.*?)">/g), function (m) { return m[1]; });
}
exports.extractAllActionTypes = extractAllActionTypes;
function extractActionPayload(actionReference) {
    var fullQualifiedImport = actionReference.getType().getText();
    var _a = __read(/.+\(props: ({.+})\).+/.exec(fullQualifiedImport) || [], 2), payloadDefinedByProps = _a[1];
    var _b = __read(/.+FunctionWithParametersType<\[.+\], ({.+}).+/.exec(fullQualifiedImport) ||
        [], 2), payloadDefinedByFunctionWithParameters = _b[1];
    return payloadDefinedByProps || payloadDefinedByFunctionWithParameters || null;
}
exports.extractActionPayload = extractActionPayload;
function segmentAction(actionType) {
    var _a = __read(/(\[[\w \/]+\])([\w ]+)/.exec(actionType) || [], 3), typeScope = _a[1], typeDescription = _a[2];
    return {
        typeFull: actionType,
        typeScope: typeScope,
        typeDescription: typeDescription || actionType
    };
}
exports.segmentAction = segmentAction;
function isTypedAction(declaration) {
    return /^import.+\.TypedAction</.test(declaration.getType().getText());
}
exports.isTypedAction = isTypedAction;
